# Unique name for this workflow
name: Deploy master branch to production org

# Definition when the workflow should run
on:
    push:
      branches: [ master ]
      paths:
        - 'force-app/**'
            

# Jobs to be executed
jobs:
    deploy-branch-to-production-org:
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            
            # Now, we need a way to let the developer specify which tests to run, which
            # could be all tests or just the tests relevant to their deployment.

            # To do this, we can ask the developer to name their test classes in the
            # body of the PR, using the following syntax

            # Apex::[CommunitiesLoginControllerTest,MyProfilePageControllerTest]::Apex
            # or Apex::[all]::Apex to run all tests

            # This special delimeter can be added to the PR template so that your 
            # team doesn't have to remember the syntax. 

            # Once a developer has specified a list of classes to run, we need to be able
            # to extract this information from the PR, and pass it on the the VM.

            - name: 'Read PR Body'
              env:
                # The pull request body is available through the github context object
                # we put the body of the pull request in an env variable (only available to this step)
                PR_BODY: ${{github.event.pull_request.body}}

              # Here we print the content of the environment variable and
              # pipe to a a text file.

              # Then we call the local script parsePR.js, which will create
              # a new file called testsToRun.txt. This file will have the list
              # of tests to run separated by a comma

              # Finally, we add the list of tests to the $GITHUB_ENV variable
              # as this allows us to reference the list in a subsequent step.  If you
              # were using a normal env variable, its value would not be available outside this step.
              run: |
                  echo $PR_BODY > ./pr_body.txt
                  node ./parsePR.js              
                  TESTS=$(cat testsToRun.txt)       
                  echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV

            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2
              with:
                fetch-depth: 0

            # Store secret for production org
            - name: 'Populate auth file with SFDX_URL secret of the integration and staging orgs'
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_PRODUCTION_URL}} > ./SFDX_PRODUCTION_URL.txt

            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/

            # Authenticate to org
            - name: 'Authenticate to Production Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_PRODUCTION_URL.txt -s -a production

            # If the env variable equals all, we run all tests
            - name: 'Deploy the entire branch to Production org - run all tests'
              if: ${{ env.APEX_TESTS == 'all' }}
              run: |
                  sfdx force:source:deploy -p "changed-sources/force-app"  --testlevel RunLocalTests  --json

            - name: 'Deploy destructive changes (if any) to Production org'
              run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings 

            - name: 'Deploy the entire branch to Production org - run specified tests'
              if: ${{ env.APEX_TESTS != 'all' }}
              run: |
                  echo ${{env.APEX_TESTS}}
                  sfdx force:source:deploy -p "changed-sources/force-app" --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json

           
