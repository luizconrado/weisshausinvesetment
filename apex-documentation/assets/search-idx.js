export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Project Home Use the apexdox.homePagePath  setting to point to an HTML file that contains details about your project. The body of the HTML will show up here instead of this default!"
    },
    {
        "title": "AccountScrambleData",
        "fileName": "AccountScrambleData.html",
        "text": "AccountScrambleData Sramble field data based on configuration provided in Scramble_Configuration__c custom setting Signature public without sharing class AccountScrambleData implements Queueable AccountScrambleData Constructors AccountScrambleData(accountIds) retrives all configuration from Scramble_Configuration__c AccountScrambleData(accountIds) retrives all configuration from Scramble_Configuration__c Signature public AccountScrambleData(List<String> accountIds) AccountScrambleData Methods execute(context) getConfigurations() creates soql querys for each object that is configured getFieldsToScramble() prepare field list of each object for which data need to be scrambled getQuerys(querys, accountIdList) preapres fully qualified query by replacing account id in where condition getScrambledData(fieldType) generate random data based on field type logError(errorMessage, stacktrace, error) logs error logRecordError(updateResult) parse database update errors and insert to log object queryDatabase(queryAndObjectMap) querys database to fetch records execute(context) Signature public void execute(QueueableContext context) getConfigurations() creates soql querys for each object that is configured Signature @testVisible private Map<String,String> getConfigurations() Returns Map<String,String> : key is object name and value is soql query getFieldsToScramble() prepare field list of each object for which data need to be scrambled Signature @testVisible private Map<String,List<DescribeFieldResult>> getFieldsToScramble() Returns Map<String,List<DescribeFieldResult>>  map of object and list of fields whose data needs to be scrambled getQuerys(querys, accountIdList) preapres fully qualified query by replacing account id in where condition Signature @testVisible private Map<String,String> getQuerys(Map<String,String> querys,List<String> accountIdList) Parameters querys Type: Map<String,String> map of object and query returnd from getConfigurations() accountIdList list of account ids whose data needs to be scrabled Returns Map<String,String> returns key value pair of obejct and fully qualified query getScrambledData(fieldType) generate random data based on field type Signature @testVisible private string getScrambledData(DescribeFieldResult fieldType) Parameters fieldType Type: DescribeFieldResult field type for which random data is needed Returns string random string logError(errorMessage, stacktrace, error) logs error Signature @testVisible private void logError(String errorMessage,String stacktrace,Exception error) Parameters errorMessage Type: String error message stacktrace error stacktrace error Exception logRecordError(updateResult) parse database update errors and insert to log object Signature @testVisible private void logRecordError(List<Database.SaveResult> updateResult) Parameters updateResult Type: List<Database.SaveResult> result of databse.update queryDatabase(queryAndObjectMap) querys database to fetch records Signature @testVisible private Map<String,List<Sobject>> queryDatabase(Map<String,String> queryAndObjectMap) Parameters queryAndObjectMap Type: Map<String,String> key value pair of object and query Returns Map<String,List<Sobject>> map of object name and list of records"
    },
    {
        "title": "AccountScrambleDataTest",
        "fileName": "AccountScrambleDataTest.html",
        "text": "AccountScrambleDataTest test class for AccountScrambleData Signature @isTest public class AccountScrambleDataTest AccountScrambleDataTest Methods logRecordErrorTest() scrambleDataSucess() setup() logRecordErrorTest() Signature @isTest static void logRecordErrorTest() scrambleDataSucess() Signature @isTest static void scrambleDataSucess() setup() Signature @testSetup static void setup()"
    },
    {
        "title": "AccountService",
        "fileName": "AccountService.html",
        "text": "AccountService all account related logic are here Signature public with Sharing class AccountService AccountService Methods createNewIdentification(recordId, languageCode) create new solaris bank identification process and inserts new kyc detail record getRecordDetails(recordId) gives account record details syncPersonDetailsWithSB(sfAccountId) updates person account details and solarisbank bank account details by calling sb service api createNewIdentification(recordId, languageCode) create new solaris bank identification process and inserts new kyc detail record Signature @AuraEnabled public static String createNewIdentification(String recordId,String languageCode) Parameters recordId Type: String account id languageCode language code in wihc id now should be created in Returns String details of success of failure Example AccountService.createNewIdentification(accountid,'de'); getRecordDetails(recordId) gives account record details Signature @AuraEnabled public static List<Account> getRecordDetails(String recordId) Parameters recordId Type: String account record id whose details are needed Returns List<Account> returns list of account Example AccountService.getRecordDetails(accountid); syncPersonDetailsWithSB(sfAccountId) updates person account details and solarisbank bank account details by calling sb service api Signature @AuraEnabled public static void syncPersonDetailsWithSB(String sfAccountId) Parameters sfAccountId Type: String account id Example AccountService.syncPersonDetailsWithSB(accountid); AccountService.service Signature public without sharing class service AccountService.service Methods createAccountAndNewsletter(email, subProductName, origin, website, accountRecordTypeId) create/update subscripiton for account and creates account record if not existing createAccountAndNewsletter(email, subProductName, origin, website, accountRecordTypeId) create/update subscripiton for account and creates account record if not existing Signature public  void createAccountAndNewsletter(String email,String subProductName,String origin,String website,String accountRecordTypeId) Parameters email Type: String email address of account user subProductName subscriptionb product name origin origin of request website webiste of request accountRecordTypeId if account doesnt exists create account of this record type Example AccountService.createAccountAndNewsletter(email, productInterest, origin, website, Constant.PERSON_ACCOUNT_RECORDTYPEID);"
    },
    {
        "title": "AccountServiceTest",
        "fileName": "AccountServiceTest.html",
        "text": "AccountServiceTest test class for AccountService Signature @isTest public class AccountServiceTest AccountServiceTest Methods testcreateNewIdentification() testsyncPersonDetailsWithSB() testcreateNewIdentification() Signature @isTest static void testcreateNewIdentification() testsyncPersonDetailsWithSB() Signature @isTest static void testsyncPersonDetailsWithSB()"
    },
    {
        "title": "AccountSolarisbankAdminPanalController",
        "fileName": "AccountSolarisbankAdminPanalController.html",
        "text": "AccountSolarisbankAdminPanalController controller class for AccountSolarisbankAdminPanal, porovides suport for all Solarisbank oprations that are done via admin panal on account,bank account,card object Signature public class AccountSolarisbankAdminPanalController AccountSolarisbankAdminPanalController Methods callGoogleMapsDetailsApi(placeId, sessionToken) callGoogleMapSearchApi(searchText, sessionToken) changeCardStatus(recordId, newStatus, reason) change card status checkIsCompactLayout() confirmPersonDetailsChangeTanRequest(recordId, tanurl, otp) sends conformation request to solarisbank to accept changes getBankAccountPicklistValues() getKYCPicklistValues() getRecordDetails(recordId) returns record details based on record id intitatePersonDetailsChangeTanRequest(recordId, requestChangebody) sends a request to solarisbank to change user details of customer reqeustNewIdentification(recordId, languageCode) creates new kyc identification request with solaribank requestAccountCloser(recordId, reason) close bank account of customer requestNewBankCard(recordId, body) request new card for customer callGoogleMapsDetailsApi(placeId, sessionToken) Signature @AuraEnabled public static String callGoogleMapsDetailsApi(String placeId,String sessionToken) callGoogleMapSearchApi(searchText, sessionToken) Signature @AuraEnabled public static String callGoogleMapSearchApi(String searchText,String sessionToken) changeCardStatus(recordId, newStatus, reason) change card status Signature @AuraEnabled public static String changeCardStatus(String recordId,String newStatus,String reason) Parameters recordId Type: String card record id newStatus status to whihc it needs to be chagned Block\\Close\\Unblock reason reason for change checkIsCompactLayout() Signature @AuraEnabled public static Boolean checkIsCompactLayout() confirmPersonDetailsChangeTanRequest(recordId, tanurl, otp) sends conformation request to solarisbank to accept changes Signature @AuraEnabled public static String confirmPersonDetailsChangeTanRequest(String recordId,String tanurl,String otp) Parameters recordId Type: String account id of customer record tanurl conformation url returend by intitatePersonDetailsChangeTanRequest otp key sent to customers registerd monbile number Returns reponse body Example AccountSolarisbankAdminPanalController.confirmPersonDetailsChangeTanRequest(accountid,url,securitycode); getBankAccountPicklistValues() Signature @auraEnabled(cacheable=true) public static Map<String,Map<String,String>> getBankAccountPicklistValues() getKYCPicklistValues() Signature @auraEnabled(cacheable=true) public static Map<String,Map<String,String>> getKYCPicklistValues() getRecordDetails(recordId) returns record details based on record id Signature @AuraEnabled public static Map<String,List<sObject>> getRecordDetails(Id recordId) Parameters recordId Type: Id record id Returns map of object and record intitatePersonDetailsChangeTanRequest(recordId, requestChangebody) sends a request to solarisbank to change user details of customer Signature @AuraEnabled public static SolarisbankCRPRequestWrapper intitatePersonDetailsChangeTanRequest(String recordId,String requestChangebody) Parameters recordId Type: String account Id of user requestChangebody details that are required to change Returns SolarisbankCRPRequestWrapper Example AccountSolarisbankAdminPanalController.intitatePersonDetailsChangeTanRequest(accountid,{ \"address\":{ \"line_1\":\"line_1\", \"line_2\":\"line_2\" }, \"title\":\"title\", \"salutation\":\"salutation\", \"address\":\"address\", \"tax_information\":\"tax_information\" }); reqeustNewIdentification(recordId, languageCode) creates new kyc identification request with solaribank Signature @AuraEnabled public static String reqeustNewIdentification(String recordId,String languageCode) Parameters recordId Type: String account id of customer languageCode lang code in which identification is to be done Returns returns identification url requestAccountCloser(recordId, reason) close bank account of customer Signature @AuraEnabled public static SolarisbankBankAccountWrapper.Errors requestAccountCloser(String recordId,String reason) Parameters recordId Type: String bank account record id reason reson for closing account Returns returns null on success or error message requestNewBankCard(recordId, body) request new card for customer Signature @AuraEnabled public static String requestNewBankCard(String recordId,String body) Parameters recordId Type: String bank account record id of customer to whihc card is to be linked body card details Returns new card id Example requestNewBankCard(bankAccountId,{ type:'debit', line_1:cardfName+'/'+cardlName, reference:randomString });"
    },
    {
        "title": "AccountSolarisbankAdminPanalTest",
        "fileName": "AccountSolarisbankAdminPanalTest.html",
        "text": "AccountSolarisbankAdminPanalTest Signature @isTest public class AccountSolarisbankAdminPanalTest AccountSolarisbankAdminPanalTest Methods callGoogleMapsDetailsApiTest() callGoogleMapSearchApiTest() confirmPersonDetailsChangeTanRequestTest() confirmPersonDetailsChangeTanRequestTestFailed() intitatePersonDetailsChangeTanRequestTest() intitatePersonDetailsChangeTanRequestTestFailed() requestAccountCloserTest() requestCreateNewCardTest() requestCreateNewCardTestFailed() staticValuesTest() testchangeCardStatusClose() testchangeCardStatusFailed() testreqeustNewIdentification() callGoogleMapsDetailsApiTest() Signature @isTest static void callGoogleMapsDetailsApiTest() callGoogleMapSearchApiTest() Signature @isTest static void callGoogleMapSearchApiTest() confirmPersonDetailsChangeTanRequestTest() Signature @isTest static void confirmPersonDetailsChangeTanRequestTest() confirmPersonDetailsChangeTanRequestTestFailed() Signature @isTest static void confirmPersonDetailsChangeTanRequestTestFailed() intitatePersonDetailsChangeTanRequestTest() Signature @isTest static void intitatePersonDetailsChangeTanRequestTest() intitatePersonDetailsChangeTanRequestTestFailed() Signature @isTest static void intitatePersonDetailsChangeTanRequestTestFailed() requestAccountCloserTest() Signature @isTest static void requestAccountCloserTest() requestCreateNewCardTest() Signature @isTest static void requestCreateNewCardTest() requestCreateNewCardTestFailed() Signature @isTest static void requestCreateNewCardTestFailed() staticValuesTest() Signature @isTest static void staticValuesTest() testchangeCardStatusClose() Signature @isTest static void testchangeCardStatusClose() testchangeCardStatusFailed() Signature @isTest static void testchangeCardStatusFailed() testreqeustNewIdentification() Signature @isTest static void testreqeustNewIdentification()"
    },
    {
        "title": "AccountTriggerHandler",
        "fileName": "AccountTriggerHandler.html",
        "text": "AccountTriggerHandler Handles routing of trigger context Signature public class AccountTriggerHandler  extends TriggerHandler AccountTriggerHandler Methods afterUpdate(Map Responseble for a. initate scrambeling data of account beforeUpdate(Map Responseble for a. caluatle person agentname b. change record type to Person partner customer afterUpdate(Map Responseble for a. initate scrambeling data of account Signature protected  override void afterUpdate(final Map<Id, SObject> newObjects, final Map<Id, SObject> oldObjects) beforeUpdate(Map Responseble for a. caluatle person agentname b. change record type to Person partner customer Signature protected  override void beforeUpdate(final Map<Id, SObject> newObjects, final Map<Id, SObject> oldObjects)"
    },
    {
        "title": "AccountTriggerHelper",
        "fileName": "AccountTriggerHelper.html",
        "text": "AccountTriggerHelper Responsible for business logic of account trigger handler Signature public class AccountTriggerHelper AccountTriggerHelper Methods calucateAgeBracket(birthDate) calcualte age based on date calucateAgeBracket(birthDate) calcualte age based on date Signature public static String calucateAgeBracket(Date birthDate) Parameters birthDate Type: Date date from which age needs to be calucated Returns age braket Example AccountTriggerHelper.calucateAgeBracket(dateOfPerson);"
    },
    {
        "title": "AgentReferalFormController",
        "fileName": "AgentReferalFormController.html",
        "text": "AgentReferalFormController Signature public without sharing class AgentReferalFormController AgentReferalFormController Methods attachPersonToBusiness(bussinessId, personId) checkRefealCode(accoutnDetails, isPersonAccount) createBusinessAccount(accountName, bankName, customerIban) createPersonAccount(firstName, lastName, email, salutation, phone) fetchCustomerReferalCode(payload) getBuninessAccountName(accName) getBusinessDetails(sfId, iban) getNewRefralCode() getPersonDetails(email) sendReferalCodeEmail(accountId, isExsistingCustomer, isPersonAccount) updateAccountOrigin(personAccount) attachPersonToBusiness(bussinessId, personId) Signature private static void attachPersonToBusiness(String bussinessId,String personId) checkRefealCode(accoutnDetails, isPersonAccount) Signature private static String  checkRefealCode(Account accoutnDetails,Boolean isPersonAccount) createBusinessAccount(accountName, bankName, customerIban) Signature private static Account createBusinessAccount(String accountName,String bankName,String customerIban) createPersonAccount(firstName, lastName, email, salutation, phone) Signature private static Account createPersonAccount(String firstName,String lastName,String email,String salutation,String phone) fetchCustomerReferalCode(payload) Signature @AuraEnabled public static String fetchCustomerReferalCode(String payload) getBuninessAccountName(accName) Signature @AuraEnabled(cacheable=true) public static List<Account> getBuninessAccountName(String accName) getBusinessDetails(sfId, iban) Signature private static Account getBusinessDetails(String sfId,String iban) getNewRefralCode() Signature private static Referral_Codes__c getNewRefralCode() getPersonDetails(email) Signature private static Account getPersonDetails(String email) sendReferalCodeEmail(accountId, isExsistingCustomer, isPersonAccount) Signature @future private static void sendReferalCodeEmail(String accountId,Boolean isExsistingCustomer,Boolean isPersonAccount) updateAccountOrigin(personAccount) Signature private static void updateAccountOrigin(Account personAccount)"
    },
    {
        "title": "AgentReferalFormControllerTest",
        "fileName": "AgentReferalFormControllerTest.html",
        "text": "AgentReferalFormControllerTest Signature @isTest public class AgentReferalFormControllerTest AgentReferalFormControllerTest Methods generateCodes() getBuninessAccountNameTest() getExsisitngPersonAccountCode() getExsistingBusinessAccount() getExstingPersonAccountCode() getNewBusinessAccount() getNewPersonAccountCode() getNewPersonAccountWithBusinessAccountCode() generateCodes() Signature @testSetup static void generateCodes() getBuninessAccountNameTest() Signature @isTest static void getBuninessAccountNameTest() getExsisitngPersonAccountCode() Signature @isTest static void getExsisitngPersonAccountCode() getExsistingBusinessAccount() Signature @isTest static void getExsistingBusinessAccount() getExstingPersonAccountCode() Signature @isTest static void getExstingPersonAccountCode() getNewBusinessAccount() Signature @isTest static void getNewBusinessAccount() getNewPersonAccountCode() Signature @isTest static void getNewPersonAccountCode() getNewPersonAccountWithBusinessAccountCode() Signature @isTest static void getNewPersonAccountWithBusinessAccountCode()"
    },
    {
        "title": "AssetService",
        "fileName": "AssetService.html",
        "text": "AssetService all asset related logic are here Signature public with sharing class AssetService AssetService Methods getAllRealEstateImageLinks(recordId) returns all asset links that are related asset record getAllRealEstateImageLinks(recordId) returns all asset links that are related asset record Signature @AuraEnabled public static List<Asset_Link__c> getAllRealEstateImageLinks(string recordId) Parameters recordId Type: string asset record id whose details are needed Returns List<Asset_Link__c> returns list of asset links Example AssetService.getAllRealEstateImageLinks(assetId);"
    },
    {
        "title": "AssetServiceTest",
        "fileName": "AssetServiceTest.html",
        "text": "AssetServiceTest test class for AssetService Signature @isTest public class AssetServiceTest AssetServiceTest Methods getAllRealEstateImageLinksTest() getAllRealEstateImageLinksTest() Signature @isTest static void getAllRealEstateImageLinksTest()"
    },
    {
        "title": "Auth0Service",
        "fileName": "Auth0Service.html",
        "text": "Auth0Service Signature public inherited  sharing  class Auth0Service Auth0Service Properties Name Signature access_token private static String access_token AUTH_URI private static  String AUTH_URI CLIENT_ID private static  String CLIENT_ID CLIENT_SECRET private static  String CLIENT_SECRET GET_USER_DETAILS_URI private static String GET_USER_DETAILS_URI HOST_URL private static  String HOST_URL VERSION private static  String VERSION Auth0Service Methods fetchUserDetails(userAuth0Id, details) getAccessToken(tenentType) getApiDetails(tenentType) getHeaders(tenentType) updateUserDetails(userAuth0Id, body, details) fetchUserDetails(userAuth0Id, details) Signature public static String fetchUserDetails(String userAuth0Id,LogService.ApiCallDetails details) getAccessToken(tenentType) Signature public static String getAccessToken(String tenentType) getApiDetails(tenentType) Signature private static void getApiDetails(String tenentType) getHeaders(tenentType) Signature private static Map<String,String> getHeaders(String tenentType) updateUserDetails(userAuth0Id, body, details) Signature public static String updateUserDetails(String userAuth0Id,String body,LogService.ApiCallDetails details)"
    },
    {
        "title": "Auth0ServiceTest",
        "fileName": "Auth0ServiceTest.html",
        "text": "Auth0ServiceTest Signature @isTest private class Auth0ServiceTest Auth0ServiceTest Methods fetchUserDetailsTest() updateUserDetailsTest() fetchUserDetailsTest() Signature @isTest static void fetchUserDetailsTest() updateUserDetailsTest() Signature @isTest static void updateUserDetailsTest()"
    },
    {
        "title": "Auth0Wrapper",
        "fileName": "Auth0Wrapper.html",
        "text": "Auth0Wrapper Signature public class Auth0Wrapper Auth0Wrapper Properties Name Signature app_metadata public App_metadata app_metadata created_at public String created_at email public String email email_verified public Boolean email_verified family_name public String family_name given_name public String given_name identities public List<Identities> identities last_ip public String last_ip last_login public String last_login logins_count public Integer logins_count name public String name nickname public String nickname picture public String picture updated_at public String updated_at user_id public String user_id user_metadata public User_metadata user_metadata Auth0Wrapper Methods parse(json) parse(json) Signature public static Auth0Wrapper parse(String json) Auth0Wrapper.App_metadata Signature public class App_metadata Auth0Wrapper.App_metadata Properties Name Signature source_application public String source_application Auth0Wrapper.Identities Signature public class Identities Auth0Wrapper.Identities Properties Name Signature connection public String connection isSocial public Boolean isSocial provider public String provider user_id public String user_id Auth0Wrapper.MockResponse Signature public class MockResponse implements HttpCalloutMock Auth0Wrapper.MockResponse Methods respond(req) respond(req) Signature public HTTPResponse respond(HTTPRequest req) Auth0Wrapper.User_metadata Signature public class User_metadata Auth0Wrapper.User_metadata Properties Name Signature invitation_code public String invitation_code language public String language person_id public String person_id term_deposit_enabled public Boolean term_deposit_enabled"
    },
    {
        "title": "BankCaseOverrideControler",
        "fileName": "BankCaseOverrideControler.html",
        "text": "BankCaseOverrideControler Signature public with sharing class BankCaseOverrideControler BankCaseOverrideControler Methods callGoogleMapsDetailsApi(placeId, sessionToken) callGoogleMapSearchApi(searchText, sessionToken) changeCardStatus(bankCaseDetails, newStatus, reasonForChange, isJira) checkIsCompactLayout() confirmPersonDetailsChangeTanRequest(recordId, tanurl, otp) createBankCases(caseId, typeI, typeII, description, bankId, cardId, accountId, bookingsId, reservationsId, timedOrdersId, standingOrdersId, statementId, idententificationsIds) createNewIdentification(recordId, languageCode) createStatment(recordId, bankAccountDetails, filterdByRange, sbAccountId, body) fetchBankStatement(recordId, bankAccountDetails, filterdByRange, solarisBankAccountId, statement) fetchExsistingBankCases(caseId) fetchTrasnsactionDetails(bankcaseId) getAllBankCards(sfBankAccountId) getAllIdentifications(sfAccountId) getBankAccounts(accountId) getBankCaseDetails(recordId) getBankCaseTypes() getCardStatusTypes() getCaseDetails(caseId) getCaseIITypes() getKYCPicklistValues() getScheludedOrderTypes() getSuccessKYCIdentificationRecord(accountId) intitatePersonDetailsChangeTanRequest(recordId, requestChangebody) logVarification(cv) requestCancleTimedOrder(bankCaseDetails, reason) requestCreateNewCard(bankCaseId, body) requestTransactionDetails(recordId, bankAccountDetails, transactionId) retriveBalanceDetails(bankcaseId) retriveBookings(sfBankId, bookingStartDate, bookingEndDate, recipentIBAN) retriveReservations(sfBankId, expireStartDate, expireEndDate, refrenceId) retriveStandingOrders(sfBankId, startDateFilter, endDateFilter, recipentIBAN) retriveTimedOrders(sfBankId, startDateFilter, endDateFilter, recipentIBAN) retriveTransactionDetails(bankcaseId) callGoogleMapsDetailsApi(placeId, sessionToken) Signature @AuraEnabled public static String callGoogleMapsDetailsApi(String placeId,String sessionToken) callGoogleMapSearchApi(searchText, sessionToken) Signature @AuraEnabled public static String callGoogleMapSearchApi(String searchText,String sessionToken) changeCardStatus(bankCaseDetails, newStatus, reasonForChange, isJira) Signature @AuraEnabled public static void changeCardStatus(Bank_Case_Item__c bankCaseDetails,String newStatus,String reasonForChange,Boolean isJira) checkIsCompactLayout() Signature @AuraEnabled public static Boolean checkIsCompactLayout() confirmPersonDetailsChangeTanRequest(recordId, tanurl, otp) Signature @AuraEnabled public static String confirmPersonDetailsChangeTanRequest(String recordId,String tanurl,String otp) createBankCases(caseId, typeI, typeII, description, bankId, cardId, accountId, bookingsId, reservationsId, timedOrdersId, standingOrdersId, statementId, idententificationsIds) Signature public static List<String> createBankCases(String caseId,String typeI,String typeII,String description,                                               String bankId,String cardId,String accountId,                                               List<String> bookingsId,List<String> reservationsId,                                               List<String> timedOrdersId,List<String> standingOrdersId,String statementId,List<String> idententificationsIds) createNewIdentification(recordId, languageCode) Signature @AuraEnabled public static string createNewIdentification(String recordId,String languageCode) createStatment(recordId, bankAccountDetails, filterdByRange, sbAccountId, body) Signature @AuraEnabled public static String createStatment(String recordId,Bank_Account__c bankAccountDetails,Boolean filterdByRange,String sbAccountId,String body) fetchBankStatement(recordId, bankAccountDetails, filterdByRange, solarisBankAccountId, statement) Signature @AuraEnabled public static String fetchBankStatement(String recordId,Bank_Account__c bankAccountDetails,Boolean filterdByRange,String solarisBankAccountId,Statement__c statement) fetchExsistingBankCases(caseId) Signature @AuraEnabled public static List<Bank_Case_Item__c> fetchExsistingBankCases(String caseId) fetchTrasnsactionDetails(bankcaseId) Signature @AuraEnabled public static String fetchTrasnsactionDetails(string bankcaseId) getAllBankCards(sfBankAccountId) Signature @AuraEnabled public static List<Card__c> getAllBankCards(String sfBankAccountId) getAllIdentifications(sfAccountId) Signature @AuraEnabled public static List<KYC_Detail__c> getAllIdentifications(String sfAccountId) getBankAccounts(accountId) Signature @AuraEnabled public static List<Bank_Account__c> getBankAccounts(String accountId) getBankCaseDetails(recordId) Signature @AuraEnabled public static Bank_Case_Item__c getBankCaseDetails(String recordId) getBankCaseTypes() Signature @AuraEnabled(cacheable=true) public static Map<String,String> getBankCaseTypes() getCardStatusTypes() Signature @auraEnabled(cacheable=true) public static Map<String,String> getCardStatusTypes() getCaseDetails(caseId) Signature @AuraEnabled public static List<Case> getCaseDetails(String caseId) getCaseIITypes() Signature @AuraEnabled(cacheable=true) public static Map<Object,List<String>> getCaseIITypes() getKYCPicklistValues() Signature @auraEnabled(cacheable=true) public static Map<String,Map<String,String>> getKYCPicklistValues() getScheludedOrderTypes() Signature @AuraEnabled(cacheable=true) public static Map<String,String> getScheludedOrderTypes() getSuccessKYCIdentificationRecord(accountId) Signature @AuraEnabled public static List<Bank__c> getSuccessKYCIdentificationRecord(String accountId) intitatePersonDetailsChangeTanRequest(recordId, requestChangebody) Signature @AuraEnabled public static SolarisbankCRPRequestWrapper intitatePersonDetailsChangeTanRequest(String recordId,String requestChangebody) logVarification(cv) Signature @AuraEnabled public static void logVarification(Case_Verification__c cv) requestCancleTimedOrder(bankCaseDetails, reason) Signature @AuraEnabled public static void requestCancleTimedOrder(Bank_Case_Item__c bankCaseDetails,String reason) requestCreateNewCard(bankCaseId, body) Signature @AuraEnabled public static String requestCreateNewCard(String bankCaseId,String body) requestTransactionDetails(recordId, bankAccountDetails, transactionId) Signature @AuraEnabled public static String requestTransactionDetails(String recordId,Bank_Account__c bankAccountDetails,String transactionId) retriveBalanceDetails(bankcaseId) Signature @AuraEnabled public static string retriveBalanceDetails(string bankcaseId) retriveBookings(sfBankId, bookingStartDate, bookingEndDate, recipentIBAN) Signature @AuraEnabled public static List<Booking__c> retriveBookings(String sfBankId,Date bookingStartDate,Date bookingEndDate,String recipentIBAN) retriveReservations(sfBankId, expireStartDate, expireEndDate, refrenceId) Signature @AuraEnabled public static List<Reservation__c> retriveReservations(String sfBankId,Date expireStartDate,Date expireEndDate,String refrenceId) retriveStandingOrders(sfBankId, startDateFilter, endDateFilter, recipentIBAN) Signature @AuraEnabled public static List<Scheduled_Order__c> retriveStandingOrders(String sfBankId,Date startDateFilter,Date endDateFilter,String recipentIBAN) retriveTimedOrders(sfBankId, startDateFilter, endDateFilter, recipentIBAN) Signature @AuraEnabled public static List<Scheduled_Order__c> retriveTimedOrders(String sfBankId,Date startDateFilter,Date endDateFilter,String recipentIBAN) retriveTransactionDetails(bankcaseId) Signature @AuraEnabled public static String retriveTransactionDetails(String bankcaseId)"
    },
    {
        "title": "BankCaseOverrideControlerTest",
        "fileName": "BankCaseOverrideControlerTest.html",
        "text": "BankCaseOverrideControlerTest Signature @isTest public class BankCaseOverrideControlerTest BankCaseOverrideControlerTest Methods requestCreateNewCardTest() testConstants() testfetchTrasnsactionDetails() testGoogleApi() testlogVarification() testQuerys() testrequestTransactionDetails() testretriveBalanceDetails() testStatmentPeriod() testStatmentRange() requestCreateNewCardTest() Signature @isTest static void requestCreateNewCardTest() testConstants() Signature @isTest static void testConstants() testfetchTrasnsactionDetails() Signature @isTest static void testfetchTrasnsactionDetails() testGoogleApi() Signature @isTest static void testGoogleApi() testlogVarification() Signature @isTest static void testlogVarification() testQuerys() Signature @isTest static void testQuerys() testrequestTransactionDetails() Signature @isTest static void testrequestTransactionDetails() testretriveBalanceDetails() Signature @isTest static void testretriveBalanceDetails() testStatmentPeriod() Signature @isTest static void testStatmentPeriod() testStatmentRange() Signature @isTest static void testStatmentRange()"
    },
    {
        "title": "BankCaseService",
        "fileName": "BankCaseService.html",
        "text": "BankCaseService Signature public with sharing class BankCaseService BankCaseService Methods confirmPersonDetailsChangeTanRequest(recordId, tanurl, otp) createBankCasesRecords(caseId, typeI, typeII, description, bankId, cardId, accountId, bookingsId, reservationsId, timedOrdersId, standingOrdersId, statementId, idententificationsIds) createNewIdentification(recordId, languageCode) initiateBankCase(caseId, filedName, recordId, recordType) initiateCardStatusChange(bankCaseDetails, newStatus, reasonForChange, isJira) initiateTimedOrderCancelation(bankCaseDetails, reason) intitatePersonDetailsChangeTanRequest(recordId, requestChangebody) logError(e, recordID, objectName, componentName, methodName, operation) requestCreateNewCard(bankCaseId, body) confirmPersonDetailsChangeTanRequest(recordId, tanurl, otp) Signature public static String confirmPersonDetailsChangeTanRequest(String recordId,String tanurl,String otp) createBankCasesRecords(caseId, typeI, typeII, description, bankId, cardId, accountId, bookingsId, reservationsId, timedOrdersId, standingOrdersId, statementId, idententificationsIds) Signature public static List<String> createBankCasesRecords(String caseId,String typeI,String typeII,String description,                                                      String bankId,String cardId,String accountId,                                                      List<String> bookingsId,List<String> reservationsId,                                                      List<String> timedOrdersId,List<String> standingOrdersId,String statementId,List<String> idententificationsIds) createNewIdentification(recordId, languageCode) Signature public static string createNewIdentification(String recordId,String languageCode) initiateBankCase(caseId, filedName, recordId, recordType) Signature private static Bank_Case_Item__c initiateBankCase(String caseId,String filedName,String recordId,String recordType) initiateCardStatusChange(bankCaseDetails, newStatus, reasonForChange, isJira) Signature @AuraEnabled public static void initiateCardStatusChange(Bank_Case_Item__c bankCaseDetails,String newStatus,String reasonForChange,Boolean isJira) initiateTimedOrderCancelation(bankCaseDetails, reason) Signature @AuraEnabled public static void initiateTimedOrderCancelation(Bank_Case_Item__c bankCaseDetails,String reason) intitatePersonDetailsChangeTanRequest(recordId, requestChangebody) Signature public static SolarisbankCRPRequestWrapper intitatePersonDetailsChangeTanRequest(String recordId,String requestChangebody) logError(e, recordID, objectName, componentName, methodName, operation) Signature private static String logError(Exception e,String recordID,String objectName,String componentName,String methodName,String operation) requestCreateNewCard(bankCaseId, body) Signature @AuraEnabled public static String requestCreateNewCard(String bankCaseId,String body)"
    },
    {
        "title": "BankCaseServiceTest",
        "fileName": "BankCaseServiceTest.html",
        "text": "BankCaseServiceTest Signature @isTest public class BankCaseServiceTest BankCaseServiceTest Methods confirmPersonDetailsChangeTanRequestException() confirmPersonDetailsChangeTanRequestFailed() confirmPersonDetailsChangeTanRequestTest() initiateTimedOrderCancelation() initiateTimedOrderCancelationNegative() requestCreateNewCardTest() requestCreateNewCardTestException() requestCreateNewCardTestFailed() testchangeCardStatusBlock() testchangeCardStatusClose() testchangeCardStatusToJira() testcreateBankCasesRecords() testcreateBankCasesRecordsNegetive() testcreateNewIdentification() testcreateNewIdentificationException() testintitatePersonDetailsChangeTanRequest() testintitatePersonDetailsChangeTanRequestException() testintitatePersonDetailsChangeTanRequestFailed() confirmPersonDetailsChangeTanRequestException() Signature @isTest static void confirmPersonDetailsChangeTanRequestException() confirmPersonDetailsChangeTanRequestFailed() Signature @isTest static void confirmPersonDetailsChangeTanRequestFailed() confirmPersonDetailsChangeTanRequestTest() Signature @isTest static void confirmPersonDetailsChangeTanRequestTest() initiateTimedOrderCancelation() Signature @isTest static void initiateTimedOrderCancelation() initiateTimedOrderCancelationNegative() Signature @isTest static void initiateTimedOrderCancelationNegative() requestCreateNewCardTest() Signature @isTest static void requestCreateNewCardTest() requestCreateNewCardTestException() Signature @isTest static void requestCreateNewCardTestException() requestCreateNewCardTestFailed() Signature @isTest static void requestCreateNewCardTestFailed() testchangeCardStatusBlock() Signature @isTest static void testchangeCardStatusBlock() testchangeCardStatusClose() Signature @isTest static void testchangeCardStatusClose() testchangeCardStatusToJira() Signature @isTest static void testchangeCardStatusToJira() testcreateBankCasesRecords() Signature @isTest static void testcreateBankCasesRecords() testcreateBankCasesRecordsNegetive() Signature @isTest static void testcreateBankCasesRecordsNegetive() testcreateNewIdentification() Signature @isTest static void testcreateNewIdentification() testcreateNewIdentificationException() Signature @isTest static void testcreateNewIdentificationException() testintitatePersonDetailsChangeTanRequest() Signature @isTest static void testintitatePersonDetailsChangeTanRequest() testintitatePersonDetailsChangeTanRequestException() Signature @isTest static void testintitatePersonDetailsChangeTanRequestException() testintitatePersonDetailsChangeTanRequestFailed() Signature @isTest static void testintitatePersonDetailsChangeTanRequestFailed() BankCaseServiceTest.MockCardResponse Signature public class MockCardResponse implements HttpCalloutMock BankCaseServiceTest.MockCardResponse Constructors MockCardResponse() MockCardResponse(isError) MockCardResponse() Signature public MockCardResponse() MockCardResponse(isError) Signature public MockCardResponse(Boolean isError) BankCaseServiceTest.MockCardResponse Methods respond(req) respond(req) Signature public HTTPResponse respond(HTTPRequest req)"
    },
    {
        "title": "BankingService",
        "fileName": "BankingService.html",
        "text": "BankingService Signature public with sharing class BankingService BankingService Methods checkIsCompactLayout() getBankCaseTypes() getCaseIITypes() retriveBankBalanceDetails(bankAccountId) retriveCaseDetails(caseId) retriveContentVersionList(caseRecordId) retriveDefaultTemplatHtml() retriveIdentificationDetailsAndUpdate(identifiactionId) retriveProcessKnowlodge(typeI, typeII) updateJiraInformation(caseId, subject, discription, contentVersionsIds) checkIsCompactLayout() Signature @AuraEnabled public static Boolean checkIsCompactLayout() getBankCaseTypes() Signature @AuraEnabled(cacheable=true) public static Map<String,String> getBankCaseTypes() getCaseIITypes() Signature @AuraEnabled(cacheable=true) public static Map<Object,List<String>> getCaseIITypes() retriveBankBalanceDetails(bankAccountId) Signature @AuraEnabled public static string retriveBankBalanceDetails(string bankAccountId) retriveCaseDetails(caseId) Signature @AuraEnabled public static List<Case> retriveCaseDetails(String caseId) retriveContentVersionList(caseRecordId) Signature @AuraEnabled public static List<ContentVersion> retriveContentVersionList(String caseRecordId) retriveDefaultTemplatHtml() Signature @AuraEnabled(cacheable=true) public static Map<String,String> retriveDefaultTemplatHtml() retriveIdentificationDetailsAndUpdate(identifiactionId) Signature @AuraEnabled public static void retriveIdentificationDetailsAndUpdate(String identifiactionId) retriveProcessKnowlodge(typeI, typeII) Signature @AuraEnabled public static List<Knowledge__kav> retriveProcessKnowlodge(String typeI,String typeII) updateJiraInformation(caseId, subject, discription, contentVersionsIds) Signature @AuraEnabled public static Boolean updateJiraInformation(String caseId,String subject,String discription,List<String> contentVersionsIds)"
    },
    {
        "title": "BankingServiceTest",
        "fileName": "BankingServiceTest.html",
        "text": "BankingServiceTest Signature @isTest public class BankingServiceTest BankingServiceTest Methods testretriveBankBalanceDetails() testretriveIdentificationDetailsAndUpdate() testStaticValues() testupdateJiraInformation() testupdateJiraInformationNegative() testretriveBankBalanceDetails() Signature @isTest static void testretriveBankBalanceDetails() testretriveIdentificationDetailsAndUpdate() Signature @isTest static void testretriveIdentificationDetailsAndUpdate() testStaticValues() Signature @isTest static void testStaticValues() testupdateJiraInformation() Signature @isTest static void testupdateJiraInformation() testupdateJiraInformationNegative() Signature @isTest static void testupdateJiraInformationNegative()"
    },
    {
        "title": "CaseTriggerHandler",
        "fileName": "CaseTriggerHandler.html",
        "text": "CaseTriggerHandler Signature public class CaseTriggerHandler extends TriggerHandler CaseTriggerHandler Methods attachAccountAndContactToCase(newCaseList, externalIdAndAccountMap) beforeInsert() getPersonAccountMap(personAccountExternalIds) attachAccountAndContactToCase(newCaseList, externalIdAndAccountMap) Signature private static void attachAccountAndContactToCase(List<Case> newCaseList,Map<String,Account> externalIdAndAccountMap) beforeInsert() Signature protected override void beforeInsert(final List<SObject> newObjects) getPersonAccountMap(personAccountExternalIds) Signature private static  Map<String,Account>  getPersonAccountMap(List<String> personAccountExternalIds)"
    },
    {
        "title": "ChangePasswordController",
        "fileName": "ChangePasswordController.html",
        "text": "ChangePasswordController An apex page controller that exposes the change password functionality Signature public with sharing class ChangePasswordController ChangePasswordController Properties Name Signature newPassword public String newPassword oldPassword public String oldPassword verifyNewPassword public String verifyNewPassword ChangePasswordController Constructors ChangePasswordController() ChangePasswordController() Signature public ChangePasswordController() ChangePasswordController Methods changePassword() changePassword() Signature public PageReference changePassword()"
    },
    {
        "title": "ChangePasswordControllerTest",
        "fileName": "ChangePasswordControllerTest.html",
        "text": "ChangePasswordControllerTest An apex page controller that exposes the change password functionality Signature @IsTest public with sharing class ChangePasswordControllerTest"
    },
    {
        "title": "CommunitiesLandingController",
        "fileName": "CommunitiesLandingController.html",
        "text": "CommunitiesLandingController An apex page controller that takes the user to the right start page based on credentials or lack thereof Signature public with sharing class CommunitiesLandingController CommunitiesLandingController Constructors CommunitiesLandingController() CommunitiesLandingController() Signature public CommunitiesLandingController() CommunitiesLandingController Methods forwardToStartPage() forwardToStartPage() Signature public PageReference forwardToStartPage()"
    },
    {
        "title": "CommunitiesLandingControllerTest",
        "fileName": "CommunitiesLandingControllerTest.html",
        "text": "CommunitiesLandingControllerTest An apex page controller that takes the user to the right start page based on credentials or lack thereof Signature @IsTest public with sharing class CommunitiesLandingControllerTest"
    },
    {
        "title": "CommunitiesLoginController",
        "fileName": "CommunitiesLoginController.html",
        "text": "CommunitiesLoginController An apex page controller that exposes the site login functionality Signature global with sharing class CommunitiesLoginController CommunitiesLoginController Constructors CommunitiesLoginController() CommunitiesLoginController() Signature global CommunitiesLoginController() CommunitiesLoginController Methods forwardToAuthPage() forwardToAuthPage() Signature global PageReference forwardToAuthPage()"
    },
    {
        "title": "CommunitiesLoginControllerTest",
        "fileName": "CommunitiesLoginControllerTest.html",
        "text": "CommunitiesLoginControllerTest An apex page controller that exposes the site login functionality Signature @IsTest global with sharing class CommunitiesLoginControllerTest CommunitiesLoginControllerTest Methods testCommunitiesLoginController() testCommunitiesLoginController() Signature @IsTest(SeeAllData=true) global static void testCommunitiesLoginController()"
    },
    {
        "title": "CommunitiesSelfRegConfirmController",
        "fileName": "CommunitiesSelfRegConfirmController.html",
        "text": "CommunitiesSelfRegConfirmController An apex page controller that takes the user to the right start page based on credentials or lack thereof Signature public with sharing class CommunitiesSelfRegConfirmController CommunitiesSelfRegConfirmController Constructors CommunitiesSelfRegConfirmController() CommunitiesSelfRegConfirmController() Signature public CommunitiesSelfRegConfirmController()"
    },
    {
        "title": "CommunitiesSelfRegConfirmControllerTest",
        "fileName": "CommunitiesSelfRegConfirmControllerTest.html",
        "text": "CommunitiesSelfRegConfirmControllerTest An apex page controller that takes the user to the right start page based on credentials or lack thereof Signature @IsTest public with sharing class CommunitiesSelfRegConfirmControllerTest"
    },
    {
        "title": "CommunitiesSelfRegController",
        "fileName": "CommunitiesSelfRegController.html",
        "text": "CommunitiesSelfRegController An apex page controller that supports self registration of users in communities that allow self registration Signature public class CommunitiesSelfRegController CommunitiesSelfRegController Properties Name Signature communityNickname public String communityNickname confirmPassword public String confirmPassword email public String email firstName public String firstName lastName public String lastName password public String password CommunitiesSelfRegController Constructors CommunitiesSelfRegController() CommunitiesSelfRegController() Signature public CommunitiesSelfRegController() CommunitiesSelfRegController Methods isValidPassword() registerUser() isValidPassword() Signature private boolean isValidPassword() registerUser() Signature public PageReference registerUser()"
    },
    {
        "title": "CommunitiesSelfRegControllerTest",
        "fileName": "CommunitiesSelfRegControllerTest.html",
        "text": "CommunitiesSelfRegControllerTest An apex page controller that supports self registration of users in communities that allow self registration Signature @IsTest public with sharing class CommunitiesSelfRegControllerTest CommunitiesSelfRegControllerTest Methods testCommunitiesSelfRegController() testCommunitiesSelfRegController() Signature @IsTest(SeeAllData=true) public static void testCommunitiesSelfRegController()"
    },
    {
        "title": "CommunityArticleService",
        "fileName": "CommunityArticleService.html",
        "text": "CommunityArticleService Signature public class CommunityArticleService CommunityArticleService Methods getTopArticles(url) getTopArticles(url) Signature @AuraEnabled(Cacheable=true) public static List<Knowledge__kav> getTopArticles(String url)"
    },
    {
        "title": "CommunityArticleServiceTest",
        "fileName": "CommunityArticleServiceTest.html",
        "text": "CommunityArticleServiceTest Signature @isTest public class CommunityArticleServiceTest CommunityArticleServiceTest Methods getTopArticlestest() getTopArticlestest() Signature @isTest static void getTopArticlestest()"
    },
    {
        "title": "Constant",
        "fileName": "Constant.html",
        "text": "Constant Signature public inherited sharing class Constant Constant Properties Name Signature ACCOUNT_BUSINESS_ACCOUNT_RECORDTYPEID public static final String ACCOUNT_BUSINESS_ACCOUNT_RECORDTYPEID ACCOUNT_INVESTMENT_BANKING_RECORDTYPEID public static final String ACCOUNT_INVESTMENT_BANKING_RECORDTYPEID ACCOUNT_PERSON_INVESTMENT_RECORDTYPEID public static final String ACCOUNT_PERSON_INVESTMENT_RECORDTYPEID ACCOUNT_REFREAL_BUSINESSE_USER_EMAILTEMPLATE public static final String ACCOUNT_REFREAL_BUSINESSE_USER_EMAILTEMPLATE ACCOUNT_REFREAL_EXSISTING_USER_EMAILTEMPLATE public static final String ACCOUNT_REFREAL_EXSISTING_USER_EMAILTEMPLATE ACCOUNT_REFREAL_NEW_USER_EMAILTEMPLATE public static final String ACCOUNT_REFREAL_NEW_USER_EMAILTEMPLATE ASSET_LINK_IMAGE_RECORDTYPEID public static final String ASSET_LINK_IMAGE_RECORDTYPEID ASSET_REAL_ESTATE_RECORDTYPEID public static final String ASSET_REAL_ESTATE_RECORDTYPEID BANK_SOLARISBANK_RECORDTYPEID public static final String BANK_SOLARISBANK_RECORDTYPEID BANK_STATEMENTS_RECORDTYPEID public static final String BANK_STATEMENTS_RECORDTYPEID BANKCASE_ACCOUNT_RECORDTYPEID public static final String BANKCASE_ACCOUNT_RECORDTYPEID BANKCASE_BANKACCOUNT_RECORDTYPEID public static final String BANKCASE_BANKACCOUNT_RECORDTYPEID BANKCASE_BOOKING_RECORDTYPEID public static final String BANKCASE_BOOKING_RECORDTYPEID BANKCASE_CARD_RECORDTYPEID public static final String BANKCASE_CARD_RECORDTYPEID BANKCASE_IDENTIFICATION_RECORDTYPEID public static final String BANKCASE_IDENTIFICATION_RECORDTYPEID BANKCASE_RESERVATION_RECORDTYPEID public static final String BANKCASE_RESERVATION_RECORDTYPEID BANKCASE_STANDINGORDER_RECORDTYPEID public static final String BANKCASE_STANDINGORDER_RECORDTYPEID BANKCASE_STATEMENT_RECORDTYPEID public static final String BANKCASE_STATEMENT_RECORDTYPEID BANKCASE_TIMEDGORDER_RECORDTYPEID public static final String BANKCASE_TIMEDGORDER_RECORDTYPEID BANKINGCASE_CASE_RECORDTYPEID public static final String BANKINGCASE_CASE_RECORDTYPEID DEBUG_LOG_RECORDTYPEID public static final String DEBUG_LOG_RECORDTYPEID DEFAULT_EV_TEMPLATE_END public static final String DEFAULT_EV_TEMPLATE_END DEFAULT_EV_TEMPLATE_START public static final String DEFAULT_EV_TEMPLATE_START DEFAULT_LEAD_RECORDTYPEID public static final String DEFAULT_LEAD_RECORDTYPEID DOCUMENT_ACCOUNT_RECORDTYPEID public static final String DOCUMENT_ACCOUNT_RECORDTYPEID EV_SUPPORT_OWD_EMAIL public static final String EV_SUPPORT_OWD_EMAIL EVKONTOAPPCASE_CASE_RECORDTYPEID public static final String EVKONTOAPPCASE_CASE_RECORDTYPEID INITEGERATION_LOG_RECORDTYPEID public static final String INITEGERATION_LOG_RECORDTYPEID INTEGERATION_USER_ID public static final String INTEGERATION_USER_ID INVESTMENTCASE_CASE_RECORDTYPEID public static final String INVESTMENTCASE_CASE_RECORDTYPEID KNOWLEDGE_FAQ_RECORDTYPEID public static final String KNOWLEDGE_FAQ_RECORDTYPEID KNOWLEDGE_SOLARISBANK_RECORDTYPEID public static final String KNOWLEDGE_SOLARISBANK_RECORDTYPEID KYC_VIDEO_IDENTIFICATION_RECORDTYPEID public static final String KYC_VIDEO_IDENTIFICATION_RECORDTYPEID OPPORTUNITY_INVESMENT_RECORDTYPEID public static final String OPPORTUNITY_INVESMENT_RECORDTYPEID OPPORTUNITY_RE_FULLSALE_RECORDTYPEID public static final String OPPORTUNITY_RE_FULLSALE_RECORDTYPEID OPPORTUNITY_RE_PARTIALSALE_RECORDTYPEID public static final String OPPORTUNITY_RE_PARTIALSALE_RECORDTYPEID OPPORTUNITY_RE_VALUATION_RECORDTYPEID public static final String OPPORTUNITY_RE_VALUATION_RECORDTYPEID OPPORTUNITY_REAL_ESTATE_SALE_EMAILTEMPLATE public static final String OPPORTUNITY_REAL_ESTATE_SALE_EMAILTEMPLATE PERSON_ACCOUNT_RECORDTYPEID public static final String PERSON_ACCOUNT_RECORDTYPEID PERSON_PARTNER_ACCOUNT_RECORDTYPEID public static final String PERSON_PARTNER_ACCOUNT_RECORDTYPEID PRICEBOOK_STANDARD_PRICEBOOK_ID public static final String PRICEBOOK_STANDARD_PRICEBOOK_ID PRODUCT_INVESTMENT_RECORDTYPEID public static final String PRODUCT_INVESTMENT_RECORDTYPEID set private set set private set set private set set private set set private set set private set STANDARD_CAMPAIGN_RECORDTYPEID public static final String STANDARD_CAMPAIGN_RECORDTYPEID STANDARD_CASE_RECORDTYPEID public static final String STANDARD_CASE_RECORDTYPEID STANDARD_OPPORTUNITY_RECORDTYPEID public static final String STANDARD_OPPORTUNITY_RECORDTYPEID STANDING_SCHEDULEDORDER_RECORDTYPEID public static final String STANDING_SCHEDULEDORDER_RECORDTYPEID STATEMENT_OF_ACCOUNTS_RECORDTYPEID public static final String STATEMENT_OF_ACCOUNTS_RECORDTYPEID SUBSCRIPTION_DEFAULT_RECORDTYPEID public static final String SUBSCRIPTION_DEFAULT_RECORDTYPEID TIMED_SCHEDULEDORDER_RECORDTYPEID public static final String TIMED_SCHEDULEDORDER_RECORDTYPEID TRACK_FIELD_CHANGE_RECORDTYPE_ID public static final String TRACK_FIELD_CHANGE_RECORDTYPE_ID TRACK_USAGE_HISTORY_RECORDTYPE_ID public static final String TRACK_USAGE_HISTORY_RECORDTYPE_ID"
    },
    {
        "title": "ConstantTest",
        "fileName": "ConstantTest.html",
        "text": "ConstantTest Signature @isTest private class ConstantTest ConstantTest Methods getValues() getValues() Signature @isTest static void getValues()"
    },
    {
        "title": "ContentVersionService",
        "fileName": "ContentVersionService.html",
        "text": "ContentVersionService Signature public class ContentVersionService ContentVersionService Methods logError(e, recordId, methodName, componentName, action) sendDocumentInfoToEV(cvIdList) logError(e, recordId, methodName, componentName, action) Signature @testVisible private static void logError(Exception e,String recordId,String methodName,String componentName,String action) sendDocumentInfoToEV(cvIdList) Signature @future(callout=true) public static void sendDocumentInfoToEV(List<String> cvIdList)"
    },
    {
        "title": "ContentVersionTriggerHandler",
        "fileName": "ContentVersionTriggerHandler.html",
        "text": "ContentVersionTriggerHandler Signature public class ContentVersionTriggerHandler extends TriggerHandler ContentVersionTriggerHandler Methods afterInsert() afterUpdate(Map afterInsert() Signature protected override void afterInsert(final List<SObject> newObjects) afterUpdate(Map Signature protected override void afterUpdate(final Map<Id, SObject> newObjects, final Map<Id, SObject> oldObjects)"
    },
    {
        "title": "DatabaseService",
        "fileName": "DatabaseService.html",
        "text": "DatabaseService Signature public  inherited  sharing class DatabaseService DatabaseService Methods insertRecords(recordsList) insertRecords(recordsList) Signature public static List<String> insertRecords(List<SObject> recordsList)"
    },
    {
        "title": "DeleteBatch",
        "fileName": "DeleteBatch.html",
        "text": "DeleteBatch Signature public class DeleteBatch implements Database.Batchable<sObject> DeleteBatch Methods execute(BC, scope) finish(BC) start(BC) execute(BC, scope) Signature public void execute(Database.BatchableContext BC, List<sObject> scope) finish(BC) Signature public void finish(Database.BatchableContext BC) start(BC) Signature public Database.QueryLocator start(Database.BatchableContext BC)"
    },
    {
        "title": "DigibankCaseFormController",
        "fileName": "DigibankCaseFormController.html",
        "text": "DigibankCaseFormController Signature public without sharing class DigibankCaseFormController DigibankCaseFormController Methods attachFilesToCase(caseId, contentVersionIds) createNewEVKnotoCase(newCase) getEVKONTOCaseRecordTypeId() processError(className, MethodName, ComponentName, Operation, Error) attachFilesToCase(caseId, contentVersionIds) Signature @AuraEnabled public static void attachFilesToCase(String caseId,List<String> contentVersionIds) createNewEVKnotoCase(newCase) Signature @AuraEnabled public static String createNewEVKnotoCase(Case newCase) getEVKONTOCaseRecordTypeId() Signature @AuraEnabled(Cacheable=true) public static String getEVKONTOCaseRecordTypeId() processError(className, MethodName, ComponentName, Operation, Error) Signature @testVisible private static AuraHandledException processError(String className,String MethodName,String ComponentName,String Operation,Exception Error)"
    },
    {
        "title": "DigibankCaseFormControllerTest",
        "fileName": "DigibankCaseFormControllerTest.html",
        "text": "DigibankCaseFormControllerTest Signature @isTest public class DigibankCaseFormControllerTest DigibankCaseFormControllerTest Methods attachFilesToCaseTest() constantsTest() createNewEVKnotoCaseTest() processErrorTest() attachFilesToCaseTest() Signature @isTest static void attachFilesToCaseTest() constantsTest() Signature @isTest static void constantsTest() createNewEVKnotoCaseTest() Signature @isTest static void createNewEVKnotoCaseTest() processErrorTest() Signature @isTest static void processErrorTest()"
    },
    {
        "title": "DigibankCaseService",
        "fileName": "DigibankCaseService.html",
        "text": "DigibankCaseService Signature public with sharing class DigibankCaseService DigibankCaseService Methods checkIsCompactLayout() fetchBugBody(caseId) getAttachedFileIds(recordId) prepareBugInfoBody(caseId, bugBody, bugSubject) retriveDefaultTemplatHtml() checkIsCompactLayout() Signature @AuraEnabled public static Boolean checkIsCompactLayout() fetchBugBody(caseId) Signature @AuraEnabled public static Map<String,String> fetchBugBody(String caseId) getAttachedFileIds(recordId) Signature private static List<ContentVersion> getAttachedFileIds(String recordId) prepareBugInfoBody(caseId, bugBody, bugSubject) Signature @AuraEnabled public static Boolean prepareBugInfoBody(String caseId,String bugBody,String bugSubject) retriveDefaultTemplatHtml() Signature @AuraEnabled(cacheable=true) public static Map<String,String> retriveDefaultTemplatHtml()"
    },
    {
        "title": "DigibankCaseServiceTest",
        "fileName": "DigibankCaseServiceTest.html",
        "text": "DigibankCaseServiceTest Signature @isTest public class DigibankCaseServiceTest DigibankCaseServiceTest Methods constantsTest() fetchBugBodyTest() prepareBugInfoBodyTest() constantsTest() Signature @isTest static void constantsTest() fetchBugBodyTest() Signature @isTest static void fetchBugBodyTest() prepareBugInfoBodyTest() Signature @isTest static void prepareBugInfoBodyTest()"
    },
    {
        "title": "DocumentReadControler",
        "fileName": "DocumentReadControler.html",
        "text": "DocumentReadControler Signature public with sharing class DocumentReadControler DocumentReadControler Methods logError(e, recordID, objectName, componentName, methodName, operation) requestDocumentUrl(documentId) logError(e, recordID, objectName, componentName, methodName, operation) Signature @testVisible private static String logError(Exception e,String recordID,String objectName,String componentName,String methodName,String operation) requestDocumentUrl(documentId) Signature @AuraEnabled public static String requestDocumentUrl(String documentId)"
    },
    {
        "title": "DocumentService",
        "fileName": "DocumentService.html",
        "text": "DocumentService Signature public  inherited  sharing class DocumentService DocumentService Properties Name Signature ACCESS_TOKEN private static String ACCESS_TOKEN DOCUMENT_URL private static  String DOCUMENT_URL HOST_URL private static  String HOST_URL DocumentService Methods fetchDocumentUrl(userAuth0Id, ticketNumber, details) getApiDetails(tenentType) getHeaders(tenentType) fetchDocumentUrl(userAuth0Id, ticketNumber, details) Signature public static String fetchDocumentUrl(String userAuth0Id,String ticketNumber,LogService.ApiCallDetails details) getApiDetails(tenentType) Signature private static void getApiDetails(String tenentType) getHeaders(tenentType) Signature private static Map<String,String> getHeaders(String tenentType)"
    },
    {
        "title": "EVException",
        "fileName": "EVException.html",
        "text": "EVException Signature public class EVException extends Exception"
    },
    {
        "title": "EVExternalService",
        "fileName": "EVExternalService.html",
        "text": "EVExternalService Signature public class EVExternalService EVExternalService Properties Name Signature ACCESS_TOKEN private static String ACCESS_TOKEN DOCUMENT_URI private static String DOCUMENT_URI HOST_URL private static  String HOST_URL INVESTMENT_DOCUMENT_DETAILS private static String INVESTMENT_DOCUMENT_DETAILS INVESTMENT_MONEY_TRANSFERD_FLAG private static String INVESTMENT_MONEY_TRANSFERD_FLAG INVESTMENT_STATUS_CHANGED_FLAG private static String INVESTMENT_STATUS_CHANGED_FLAG PRODUCTS_URI private static String PRODUCTS_URI UDPATE_PRODUCTS_URI private static String UDPATE_PRODUCTS_URI EVExternalService Methods fetchDocumentUrl(userAuth0Id, ticketNumber, details) getApiDetails(tenentType) getHeaders(tenentType) sendInvestmentDocumentInformation(externalId, body, details) sendInvestmentMoneyTransferdStatus(externalId, status, details) sendInvestmentStatusChange(externalId, status, details) sendProductsInfo(body, details) updateProductsInfo(body, productId, details) fetchDocumentUrl(userAuth0Id, ticketNumber, details) Signature public static String fetchDocumentUrl(String userAuth0Id,String ticketNumber,LogService.ApiCallDetails details) getApiDetails(tenentType) Signature private static void getApiDetails(String tenentType) getHeaders(tenentType) Signature private static Map<String,String> getHeaders(String tenentType) sendInvestmentDocumentInformation(externalId, body, details) Signature public static String sendInvestmentDocumentInformation(String externalId,String body,LogService.ApiCallDetails details) sendInvestmentMoneyTransferdStatus(externalId, status, details) Signature public static String sendInvestmentMoneyTransferdStatus(String externalId,boolean status,LogService.ApiCallDetails details) sendInvestmentStatusChange(externalId, status, details) Signature public static String sendInvestmentStatusChange(String externalId,String status,LogService.ApiCallDetails details) sendProductsInfo(body, details) Signature public static String sendProductsInfo(String body,LogService.ApiCallDetails details) updateProductsInfo(body, productId, details) Signature public static String updateProductsInfo(String body,String productId,LogService.ApiCallDetails details)"
    },
    {
        "title": "EVExternalServiceTest",
        "fileName": "EVExternalServiceTest.html",
        "text": "EVExternalServiceTest Signature @isTest public class EVExternalServiceTest EVExternalServiceTest Methods requestDocumentUrlErrorTest() requestDocumentUrlTest() sendProductsInfoTest() testFetchDocumentUrl() requestDocumentUrlErrorTest() Signature @isTest static void requestDocumentUrlErrorTest() requestDocumentUrlTest() Signature @isTest static void requestDocumentUrlTest() sendProductsInfoTest() Signature @isTest static void sendProductsInfoTest() testFetchDocumentUrl() Signature @isTest static void testFetchDocumentUrl() EVExternalServiceTest.DocumentMockResponse Signature public class DocumentMockResponse implements HttpCalloutMock EVExternalServiceTest.DocumentMockResponse Constructors DocumentMockResponse() DocumentMockResponse(isError) DocumentMockResponse() Signature public DocumentMockResponse() DocumentMockResponse(isError) Signature public DocumentMockResponse(Boolean isError) EVExternalServiceTest.DocumentMockResponse Methods respond(req) respond(req) Signature public HTTPResponse respond(HTTPRequest req)"
    },
    {
        "title": "FlowCoverageTest",
        "fileName": "FlowCoverageTest.html",
        "text": "FlowCoverageTest Signature @isTest public class FlowCoverageTest FlowCoverageTest Methods Seizure_NotificationTest() Seizure_NotificationTest() Signature @isTest static void Seizure_NotificationTest()"
    },
    {
        "title": "FlowSendProductDetailsToBE",
        "fileName": "FlowSendProductDetailsToBE.html",
        "text": "FlowSendProductDetailsToBE Signature public class FlowSendProductDetailsToBE FlowSendProductDetailsToBE Methods sendProductDataToExternalSystem(products) sendProductDataToExternalSystem(products) Signature @InvocableMethod(label='Send Product details to external service') public static void sendProductDataToExternalSystem(List<Product2> products)"
    },
    {
        "title": "FlowUpdateProductDetailsToBE",
        "fileName": "FlowUpdateProductDetailsToBE.html",
        "text": "FlowUpdateProductDetailsToBE Signature public class FlowUpdateProductDetailsToBE FlowUpdateProductDetailsToBE Methods updatedProductDataToExternalSystem(products) updatedProductDataToExternalSystem(products) Signature @InvocableMethod(label='Update Product details to external service') public static void updatedProductDataToExternalSystem(List<Product2> products)"
    },
    {
        "title": "ForgotPasswordController",
        "fileName": "ForgotPasswordController.html",
        "text": "ForgotPasswordController An apex page controller that exposes the site forgot password functionality Signature public with sharing class ForgotPasswordController ForgotPasswordController Properties Name Signature username public String username ForgotPasswordController Constructors ForgotPasswordController() ForgotPasswordController() Signature public ForgotPasswordController() ForgotPasswordController Methods forgotPassword() forgotPassword() Signature public PageReference forgotPassword()"
    },
    {
        "title": "ForgotPasswordControllerTest",
        "fileName": "ForgotPasswordControllerTest.html",
        "text": "ForgotPasswordControllerTest An apex page controller that exposes the site forgot password functionality Signature @IsTest public with sharing class ForgotPasswordControllerTest"
    },
    {
        "title": "KnowledgeTriggerHandler",
        "fileName": "KnowledgeTriggerHandler.html",
        "text": "KnowledgeTriggerHandler Signature public class KnowledgeTriggerHandler extends TriggerHandler KnowledgeTriggerHandler Properties Name Signature fieldsToCopy private static String fieldsToCopy KnowledgeTriggerHandler Methods beforeInsert() copyMasterDataToLocal(draftLocalArticles) getMasterLanguageData(draftLocalArticles) beforeInsert() Signature protected override void beforeInsert(final List<SObject> newObjects) copyMasterDataToLocal(draftLocalArticles) Signature private static void copyMasterDataToLocal(Map<String,Knowledge__kav> draftLocalArticles) getMasterLanguageData(draftLocalArticles) Signature private static Map<String,Knowledge__kav> getMasterLanguageData(Map<String,Knowledge__kav> draftLocalArticles)"
    },
    {
        "title": "KnowledgeTriggerHandlerTest",
        "fileName": "KnowledgeTriggerHandlerTest.html",
        "text": "KnowledgeTriggerHandlerTest Signature @isTest public class KnowledgeTriggerHandlerTest KnowledgeTriggerHandlerTest Methods testTranslation() testTranslation() Signature @isTest static void testTranslation()"
    },
    {
        "title": "LightningForgotPasswordController",
        "fileName": "LightningForgotPasswordController.html",
        "text": "LightningForgotPasswordController Signature global class LightningForgotPasswordController LightningForgotPasswordController Constructors LightningForgotPasswordController() LightningForgotPasswordController() Signature public LightningForgotPasswordController() LightningForgotPasswordController Methods forgotPassword(username, checkEmailUrl) setExperienceId(expId) forgotPassword(username, checkEmailUrl) Signature @AuraEnabled public static String forgotPassword(String username, String checkEmailUrl) setExperienceId(expId) Signature @AuraEnabled global static String setExperienceId(String expId)"
    },
    {
        "title": "LightningForgotPasswordControllerTest",
        "fileName": "LightningForgotPasswordControllerTest.html",
        "text": "LightningForgotPasswordControllerTest Signature @IsTest(SeeAllData = true) public with sharing class LightningForgotPasswordControllerTest LightningForgotPasswordControllerTest Methods LightningForgotPasswordControllerInstantiation() testLightningForgotPasswordControllerInvalidUserName() testLightningForgotPasswordControllerWithNullCheckEmailRef() LightningForgotPasswordControllerInstantiation() Signature @IsTest static void LightningForgotPasswordControllerInstantiation() testLightningForgotPasswordControllerInvalidUserName() Signature @IsTest static void testLightningForgotPasswordControllerInvalidUserName() testLightningForgotPasswordControllerWithNullCheckEmailRef() Signature @IsTest static void testLightningForgotPasswordControllerWithNullCheckEmailRef()"
    },
    {
        "title": "LightningLoginFormController",
        "fileName": "LightningLoginFormController.html",
        "text": "LightningLoginFormController Signature global class LightningLoginFormController LightningLoginFormController Constructors LightningLoginFormController() LightningLoginFormController() Signature public LightningLoginFormController() LightningLoginFormController Methods getAuthConfig() getForgotPasswordUrl() getIsSelfRegistrationEnabled() getIsUsernamePasswordEnabled() getSelfRegistrationUrl() login(username, password, startUrl) setExperienceId(expId) getAuthConfig() Signature @TestVisible private static Auth.AuthConfiguration getAuthConfig() getForgotPasswordUrl() Signature @AuraEnabled public static String getForgotPasswordUrl() getIsSelfRegistrationEnabled() Signature @AuraEnabled public static Boolean getIsSelfRegistrationEnabled() getIsUsernamePasswordEnabled() Signature @AuraEnabled public static Boolean getIsUsernamePasswordEnabled() getSelfRegistrationUrl() Signature @AuraEnabled public static String getSelfRegistrationUrl() login(username, password, startUrl) Signature @AuraEnabled public static String login(String username, String password, String startUrl) setExperienceId(expId) Signature @AuraEnabled global static String setExperienceId(String expId)"
    },
    {
        "title": "LightningLoginFormControllerTest",
        "fileName": "LightningLoginFormControllerTest.html",
        "text": "LightningLoginFormControllerTest Signature @IsTest(SeeAllData = true) public with sharing class LightningLoginFormControllerTest LightningLoginFormControllerTest Methods LightningLoginFormControllerInstantiation() testAuthConfig() testGetSelfRegistrationURL() testIsSelfRegistrationEnabled() testIsUsernamePasswordEnabled() LightningLoginFormControllerInstantiation() Signature @IsTest static void LightningLoginFormControllerInstantiation() testAuthConfig() Signature @IsTest static void testAuthConfig() testGetSelfRegistrationURL() Signature @IsTest static void testGetSelfRegistrationURL() testIsSelfRegistrationEnabled() Signature @IsTest static void testIsSelfRegistrationEnabled() testIsUsernamePasswordEnabled() Signature @IsTest static void testIsUsernamePasswordEnabled()"
    },
    {
        "title": "LightningSelfRegisterController",
        "fileName": "LightningSelfRegisterController.html",
        "text": "LightningSelfRegisterController Signature global class LightningSelfRegisterController LightningSelfRegisterController Constructors LightningSelfRegisterController() LightningSelfRegisterController() Signature public LightningSelfRegisterController() LightningSelfRegisterController Methods getExtraFields(extraFieldsFieldSet) isValidPassword(password, confirmPassword) selfRegister(firstname, lastname, email, password, confirmPassword, accountId, regConfirmUrl, extraFields, startUrl, includePassword) setExperienceId(expId) siteAsContainerEnabled(communityUrl) validatePassword(u, password, confirmPassword) getExtraFields(extraFieldsFieldSet) Signature @AuraEnabled public static List<Map<String,Object>> getExtraFields(String extraFieldsFieldSet) isValidPassword(password, confirmPassword) Signature @TestVisible private static boolean isValidPassword(String password, String confirmPassword) selfRegister(firstname, lastname, email, password, confirmPassword, accountId, regConfirmUrl, extraFields, startUrl, includePassword) Signature @AuraEnabled public static String selfRegister(String firstname ,String lastname, String email, String password, String confirmPassword, String accountId, String regConfirmUrl, String extraFields, String startUrl, Boolean includePassword) setExperienceId(expId) Signature @AuraEnabled global static String setExperienceId(String expId) siteAsContainerEnabled(communityUrl) Signature @TestVisible private static boolean siteAsContainerEnabled(String communityUrl) validatePassword(u, password, confirmPassword) Signature @TestVisible private static void validatePassword(User u, String password, String confirmPassword)"
    },
    {
        "title": "LightningSelfRegisterControllerTest",
        "fileName": "LightningSelfRegisterControllerTest.html",
        "text": "LightningSelfRegisterControllerTest Signature @IsTest(SeeAllData = true) public with sharing class LightningSelfRegisterControllerTest LightningSelfRegisterControllerTest Methods initializeParams() LightningSelfRegisterControllerInstantiation() testGetExtraFieldsInSelfRegistration() testGetNonEmptyExtraFields() testGetNullExtraFields() testIsValidPassword() testSelfRegisterWithCreatedAccount() testSelfRegisterWithProperCredentials() testSelfRegistration() testSiteAsContainerEnabled() initializeParams() Signature private static Map < String, String > initializeParams() LightningSelfRegisterControllerInstantiation() Signature @IsTest static void LightningSelfRegisterControllerInstantiation() testGetExtraFieldsInSelfRegistration() Signature @IsTest static void testGetExtraFieldsInSelfRegistration() testGetNonEmptyExtraFields() Signature @IsTest static void testGetNonEmptyExtraFields() testGetNullExtraFields() Signature @IsTest static void testGetNullExtraFields() testIsValidPassword() Signature @IsTest static void testIsValidPassword() testSelfRegisterWithCreatedAccount() Signature @IsTest static void testSelfRegisterWithCreatedAccount() testSelfRegisterWithProperCredentials() Signature @IsTest static void testSelfRegisterWithProperCredentials() testSelfRegistration() Signature @IsTest static void testSelfRegistration() testSiteAsContainerEnabled() Signature @IsTest static void testSiteAsContainerEnabled()"
    },
    {
        "title": "LogEventsHandler",
        "fileName": "LogEventsHandler.html",
        "text": "LogEventsHandler Signature public class LogEventsHandler  extends TriggerHandler LogEventsHandler Methods afterInsert() afterInsert() Signature protected override void afterInsert(final List<SObject> newObjects)"
    },
    {
        "title": "LogService",
        "fileName": "LogService.html",
        "text": "LogService Signature public inherited  sharing class LogService LogService Methods captureLogs(events) LogApiCall(details) logError(details) captureLogs(events) Signature public static void captureLogs(List<Log_Event__e> events) LogApiCall(details) Signature public static void LogApiCall(ApiCallDetails details) logError(details) Signature public static String logError(LogMetadata details) LogService.ApiCallDetails Signature public class ApiCallDetails LogService.ApiCallDetails Properties Name Signature Annotations calltype public String calltype @AuraEnabled comments public String comments @AuraEnabled index public String index @AuraEnabled objectName public String objectName @AuraEnabled operation public String operation @AuraEnabled recordId public String recordId @AuraEnabled requestBody public String requestBody @AuraEnabled responseBody public String responseBody @AuraEnabled responseCode public Integer responseCode @AuraEnabled sbTenent public String sbTenent @AuraEnabled url public String url @AuraEnabled userId public String userId @AuraEnabled LogService.ApiCallDetails Constructors ApiCallDetails(recordId, objectName, sbTenent) ApiCallDetails() ApiCallDetails(recordId, objectName, sbTenent) Signature public ApiCallDetails(String recordId,String objectName,String sbTenent) ApiCallDetails() Signature public ApiCallDetails() LogService.ApiCallDetails Methods addApiDetails(url, requestBody, responseBody, responseCode) addComment(comments) addMetadataInfo(userId, operation) addRecordInfo(objectName, recordId) addApiDetails(url, requestBody, responseBody, responseCode) Signature public void addApiDetails(String url,String requestBody,String responseBody,Integer responseCode) addComment(comments) Signature public void addComment(String comments) addMetadataInfo(userId, operation) Signature public void addMetadataInfo(String userId,String operation) addRecordInfo(objectName, recordId) Signature public void addRecordInfo(String objectName,String recordId) LogService.LogMetadata Signature public class LogMetadata LogService.LogMetadata Properties Name Signature Annotations className public String className comments public String comments @AuraEnabled componentName public String componentName error public Exception error errorMessage public String errorMessage index public String index methodName public String methodName objectName public String objectName operation public String operation recordId public String recordId stacktrace public String stacktrace userId public String userId LogService.LogMetadata Constructors LogMetadata() LogMetadata() Signature public LogMetadata() LogService.LogMetadata Methods addComment(comments) addError(error) addErrorString(errorMessage, stacktrace) addMetadataInfo(userId, className, methodName, componentName, operation) addRecordInfo(objectName, recordId) addComment(comments) Signature public void addComment(String comments) addError(error) Signature public void addError(Exception error) addErrorString(errorMessage, stacktrace) Signature public void addErrorString(String errorMessage,String stacktrace) addMetadataInfo(userId, className, methodName, componentName, operation) Signature public void addMetadataInfo(String userId,String className,String methodName,String componentName,String operation) addRecordInfo(objectName, recordId) Signature public void addRecordInfo(String objectName,String recordId)"
    },
    {
        "title": "LogServiceTest",
        "fileName": "LogServiceTest.html",
        "text": "LogServiceTest Signature @isTest public class LogServiceTest LogServiceTest Methods testLogApiCall() testlogError() testLogingTriggers() testLogApiCall() Signature @isTest static void testLogApiCall() testlogError() Signature @isTest static void testlogError() testLogingTriggers() Signature @isTest static void testLogingTriggers()"
    },
    {
        "title": "LogsListViewController",
        "fileName": "LogsListViewController.html",
        "text": "LogsListViewController Signature public without sharing class LogsListViewController LogsListViewController Methods getAPILogs(recordId, lognumber, searchType) getCRPLogs(recordId, logNumber, searchType) getErrorLogs(recordId, lognumber, searchType) getHistoryLogs(recordId, lognumber, searchType) getTotalRecordCount(recordId, logType) getViewLogs(recordId, lognumber, searchType) getAPILogs(recordId, lognumber, searchType) Signature @AuraEnabled public static List<Log__c> getAPILogs(String recordId,String lognumber,string searchType) getCRPLogs(recordId, logNumber, searchType) Signature @AuraEnabled public static List<Change_Request_Log__c> getCRPLogs(String recordId,String logNumber,String searchType) getErrorLogs(recordId, lognumber, searchType) Signature @AuraEnabled public static List<Log__c> getErrorLogs(String recordId,String lognumber,string searchType) getHistoryLogs(recordId, lognumber, searchType) Signature @AuraEnabled public static List<History_Tracker__c> getHistoryLogs(String recordId,String lognumber,string searchType) getTotalRecordCount(recordId, logType) Signature @AuraEnabled public static Integer getTotalRecordCount(String recordId,String logType) getViewLogs(recordId, lognumber, searchType) Signature @AuraEnabled public static List<History_Tracker__c> getViewLogs(String recordId,String lognumber,string searchType)"
    },
    {
        "title": "LogsListViewControllerTest",
        "fileName": "LogsListViewControllerTest.html",
        "text": "LogsListViewControllerTest Signature @isTest public class LogsListViewControllerTest LogsListViewControllerTest Methods getLogsTest() getTotalRecordCountTest() setupDataTest() getLogsTest() Signature @isTest static void getLogsTest() getTotalRecordCountTest() Signature @isTest static void getTotalRecordCountTest() setupDataTest() Signature @testSetup static void setupDataTest()"
    },
    {
        "title": "MailUtill",
        "fileName": "MailUtill.html",
        "text": "MailUtill Signature public  inherited sharing class MailUtill MailUtill Methods findFieldsInTemplate(emailTemplate, isClassic) findIndexInString(sentence, keyword) logEmailError(recordID, errorMsg, method) proccessEmailTempalateFields(fieldList) proccessEmailTemplate(htmlValue, isClassic, objectName, recordId) processFieldValues(fieldRelationMap, ObjectName, recordId) sendEmailWithAttachment(emailSubject, body, contentVersionIds, toAddress, OWDId, recordID) sendPlainHtmlEmail(emailSubject, body, toAddress, OWDId, recordID) sendTemplateEmail(toAddress, reciverId, accociatedRecordId, emailTemplateId, OWDId) findFieldsInTemplate(emailTemplate, isClassic) Signature private static List<String> findFieldsInTemplate(String emailTemplate,Boolean isClassic) findIndexInString(sentence, keyword) Signature private static List<Integer> findIndexInString(String sentence,String keyword) logEmailError(recordID, errorMsg, method) Signature @testVisible private static void logEmailError(Id recordID,String errorMsg,String method) proccessEmailTempalateFields(fieldList) Signature private static Map<String,String> proccessEmailTempalateFields(List<String> fieldList) proccessEmailTemplate(htmlValue, isClassic, objectName, recordId) Signature public static string proccessEmailTemplate(String htmlValue,Boolean isClassic,String objectName,String recordId) processFieldValues(fieldRelationMap, ObjectName, recordId) Signature private static Map<String,String> processFieldValues(Map<String,String> fieldRelationMap,String ObjectName,String recordId) sendEmailWithAttachment(emailSubject, body, contentVersionIds, toAddress, OWDId, recordID) Signature public static Boolean sendEmailWithAttachment(String emailSubject,String body,List<String> contentVersionIds,String toAddress,String OWDId,String recordID) sendPlainHtmlEmail(emailSubject, body, toAddress, OWDId, recordID) Signature public static Boolean sendPlainHtmlEmail(String emailSubject,String body,String toAddress,String OWDId,String recordID) sendTemplateEmail(toAddress, reciverId, accociatedRecordId, emailTemplateId, OWDId) Signature public static Boolean sendTemplateEmail(String toAddress,String reciverId,String accociatedRecordId,String emailTemplateId,String OWDId)"
    },
    {
        "title": "MailUtillTest",
        "fileName": "MailUtillTest.html",
        "text": "MailUtillTest Signature @isTest public class MailUtillTest MailUtillTest Methods proccessEmailTemplateTest() sendEmailWithAttachmentTest() sendEmailWithAttachmentTestNegative() sendTemplateEmailtest() proccessEmailTemplateTest() Signature @istest static void proccessEmailTemplateTest() sendEmailWithAttachmentTest() Signature @isTest static void sendEmailWithAttachmentTest() sendEmailWithAttachmentTestNegative() Signature @isTest static void sendEmailWithAttachmentTestNegative() sendTemplateEmailtest() Signature @isTest static void sendTemplateEmailtest()"
    },
    {
        "title": "MicrobatchSelfRegController",
        "fileName": "MicrobatchSelfRegController.html",
        "text": "MicrobatchSelfRegController Signature public class MicrobatchSelfRegController MicrobatchSelfRegController Properties Name Signature communityNickname public String communityNickname email public String email firstName public String firstName lastName public String lastName MicrobatchSelfRegController Constructors MicrobatchSelfRegController() MicrobatchSelfRegController() Signature public MicrobatchSelfRegController() MicrobatchSelfRegController Methods registerUser() registerUser() Signature public PageReference registerUser()"
    },
    {
        "title": "MicrobatchSelfRegControllerTest",
        "fileName": "MicrobatchSelfRegControllerTest.html",
        "text": "MicrobatchSelfRegControllerTest Signature @IsTest public with sharing class MicrobatchSelfRegControllerTest MicrobatchSelfRegControllerTest Methods testMicrobatchSelfRegController() testMicrobatchSelfRegController() Signature @IsTest(SeeAllData=true) public static void testMicrobatchSelfRegController()"
    },
    {
        "title": "MyProfilePageController",
        "fileName": "MyProfilePageController.html",
        "text": "MyProfilePageController An apex class that updates portal user details. Guest users are never able to access this page. Signature public with sharing class MyProfilePageController MyProfilePageController Properties Name Signature isEdit private boolean isEdit user private User user MyProfilePageController Constructors MyProfilePageController() MyProfilePageController() Signature public MyProfilePageController() MyProfilePageController Methods cancel() changePassword() edit() getIsEdit() getUser() save() cancel() Signature public void cancel() changePassword() Signature public PageReference changePassword() edit() Signature public void edit() getIsEdit() Signature public Boolean getIsEdit() getUser() Signature public User getUser() save() Signature public void save()"
    },
    {
        "title": "MyProfilePageControllerTest",
        "fileName": "MyProfilePageControllerTest.html",
        "text": "MyProfilePageControllerTest An apex class that updates details of a portal user. Guest users are never able to access this page. Signature @IsTest public with sharing class MyProfilePageControllerTest"
    },
    {
        "title": "OpportuntiyRealEstateService",
        "fileName": "OpportuntiyRealEstateService.html",
        "text": "OpportuntiyRealEstateService Signature public with sharing class OpportuntiyRealEstateService OpportuntiyRealEstateService Methods getRealEstateSaleEmailPreview(recordId) getSentToEmail(recordTypeId) getTermDepositeStatus(recordId) sendEmailToAgent(body, subject, recordId, emailTo) setAssetEvaluationDateToCurrentMonth(assetId) toggleTermDepostForUser(recordId, status) getRealEstateSaleEmailPreview(recordId) Signature @AuraEnabled public static Map<String,String> getRealEstateSaleEmailPreview(Id recordId) getSentToEmail(recordTypeId) Signature private static String getSentToEmail(String recordTypeId) getTermDepositeStatus(recordId) Signature @AuraEnabled public static Boolean getTermDepositeStatus(String recordId) sendEmailToAgent(body, subject, recordId, emailTo) Signature @AuraEnabled public static void sendEmailToAgent(String body,String subject,String recordId,String emailTo) setAssetEvaluationDateToCurrentMonth(assetId) Signature private static void setAssetEvaluationDateToCurrentMonth(String assetId ) toggleTermDepostForUser(recordId, status) Signature @AuraEnabled public static Boolean toggleTermDepostForUser(String recordId,Boolean status)"
    },
    {
        "title": "OpportuntiyRealEstateServiceTest",
        "fileName": "OpportuntiyRealEstateServiceTest.html",
        "text": "OpportuntiyRealEstateServiceTest Signature @isTest public class OpportuntiyRealEstateServiceTest OpportuntiyRealEstateServiceTest Methods getRealEstateSaleEmailPreviewTest() getTermDepositeStatusTest() toggleTermDepostForUserTest() getRealEstateSaleEmailPreviewTest() Signature @isTest static void getRealEstateSaleEmailPreviewTest() getTermDepositeStatusTest() Signature @isTest static void getTermDepositeStatusTest() toggleTermDepostForUserTest() Signature @isTest static void toggleTermDepostForUserTest()"
    },
    {
        "title": "Product2ExternalService",
        "fileName": "Product2ExternalService.html",
        "text": "Product2ExternalService Signature public class Product2ExternalService Product2ExternalService Methods sendProductDataToExternalSystem(products) updatedProductDataToExternalSystem(products) sendProductDataToExternalSystem(products) Signature public static void sendProductDataToExternalSystem(List<Product2> products) updatedProductDataToExternalSystem(products) Signature public static void  updatedProductDataToExternalSystem(List<Product2> products)"
    },
    {
        "title": "RandomUtil",
        "fileName": "RandomUtil.html",
        "text": "RandomUtil Signature public inherited sharing class RandomUtil RandomUtil Methods getUUID() randomNumber(maxValue) randomString(length) randomUUID() getUUID() Signature public static String getUUID() randomNumber(maxValue) Signature public static Integer randomNumber( Integer maxValue) randomString(length) Signature public static String randomString( Integer length) randomUUID() Signature public static String randomUUID()"
    },
    {
        "title": "RandomUtilTest",
        "fileName": "RandomUtilTest.html",
        "text": "RandomUtilTest Signature @isTest public class RandomUtilTest RandomUtilTest Methods getValues() getValues() Signature @isTest static void getValues()"
    },
    {
        "title": "RestResponseWrapper",
        "fileName": "RestResponseWrapper.html",
        "text": "RestResponseWrapper Signature global class RestResponseWrapper RestResponseWrapper Properties Name Signature error global List<String> error status global Integer status success global List<Object> success RestResponseWrapper Methods setError(status, error) setSuccess(status, success) setError(status, error) Signature global static Blob setError(Integer status,List<String> error) setSuccess(status, success) Signature global static Blob setSuccess(Integer status,List<Object> success)"
    },
    {
        "title": "RestService",
        "fileName": "RestService.html",
        "text": "RestService Signature public inherited  sharing class RestService RestService Methods call(method, endpoint, headers, body, timeoutSec) extraTimoutpost(endpoint, headers, body, timeoutSec) get(endpoint, headers) patch(endpoint, headers, body) post(endpoint, headers, body) put(endpoint, headers, body) call(method, endpoint, headers, body, timeoutSec) Signature private static HttpResponse call(String method,String endpoint,Map<String,String> headers,String body,Integer timeoutSec) extraTimoutpost(endpoint, headers, body, timeoutSec) Signature public static HttpResponse extraTimoutpost(String endpoint,Map<String,String> headers,String body,Integer timeoutSec) get(endpoint, headers) Signature public static HttpResponse get(String endpoint,Map<String,String> headers) patch(endpoint, headers, body) Signature public static HttpResponse patch(String endpoint,Map<String,String> headers,String body) post(endpoint, headers, body) Signature public static HttpResponse post(String endpoint,Map<String,String> headers,String body) put(endpoint, headers, body) Signature public static HttpResponse put(String endpoint,Map<String,String> headers,String body) RestService.RestCallException Signature public class RestCallException extends Exception"
    },
    {
        "title": "RestServiceAccountAnonymize",
        "fileName": "RestServiceAccountAnonymize.html",
        "text": "RestServiceAccountAnonymize Signature @RestResource(UrlMapping='/Account/Anonymize/*') global class RestServiceAccountAnonymize RestServiceAccountAnonymize Methods doDelete() logError(e, method, params) doDelete() Signature @Httpdelete global static void doDelete() logError(e, method, params) Signature @testvisible private static void logError(Exception e,String method,String params)"
    },
    {
        "title": "RestServiceAccountAnonymizeTest",
        "fileName": "RestServiceAccountAnonymizeTest.html",
        "text": "RestServiceAccountAnonymizeTest Signature @isTest public class RestServiceAccountAnonymizeTest RestServiceAccountAnonymizeTest Methods doDeleteAccountErrorTest() doDeleteErrorTest() doDeleteSuccessTest() logErrorTest() doDeleteAccountErrorTest() Signature @isTest static void doDeleteAccountErrorTest() doDeleteErrorTest() Signature @isTest static void doDeleteErrorTest() doDeleteSuccessTest() Signature @isTest static void doDeleteSuccessTest() logErrorTest() Signature @isTest static void logErrorTest()"
    },
    {
        "title": "RestServiceAccountCreate",
        "fileName": "RestServiceAccountCreate.html",
        "text": "RestServiceAccountCreate Signature @RestResource(UrlMapping='/Account/Create/*') global class RestServiceAccountCreate RestServiceAccountCreate Methods doPatch() logError(e, method, body) doPatch() Signature @HttpPatch global static void doPatch() logError(e, method, body) Signature private static void logError(Exception e,String method,String body)"
    },
    {
        "title": "RestServiceAccountCreateTest",
        "fileName": "RestServiceAccountCreateTest.html",
        "text": "RestServiceAccountCreateTest Signature @isTest public class RestServiceAccountCreateTest RestServiceAccountCreateTest Methods doPatchErrorTest() doPatchNoAccountTest() doPatchSuccessExsistingAccountTest() doPatchSuccessTest() doPatchSystemErrorTest() doPatchErrorTest() Signature @isTest static void doPatchErrorTest() doPatchNoAccountTest() Signature @isTest static void doPatchNoAccountTest() doPatchSuccessExsistingAccountTest() Signature @isTest static void doPatchSuccessExsistingAccountTest() doPatchSuccessTest() Signature @isTest static void doPatchSuccessTest() doPatchSystemErrorTest() Signature @isTest static void doPatchSystemErrorTest()"
    },
    {
        "title": "RestServiceAccountSMICreate",
        "fileName": "RestServiceAccountSMICreate.html",
        "text": "RestServiceAccountSMICreate Signature @RestResource(UrlMapping='/Account/SMI/Create/*') global class RestServiceAccountSMICreate RestServiceAccountSMICreate Methods doPatch() logError(e, method, body) doPatch() Signature @HttpPatch global static void doPatch() logError(e, method, body) Signature private static void logError(Exception e,String method,String body)"
    },
    {
        "title": "RestServiceRealEstate",
        "fileName": "RestServiceRealEstate.html",
        "text": "RestServiceRealEstate Signature @RestResource(UrlMapping='/Asset/RealEstate/*') global without sharing class RestServiceRealEstate RestServiceRealEstate Methods doDelete() doGet() doPost() doPut() getAssetImageBaseUrl() logError(e, method, body) doDelete() Signature @HttpDelete global static void doDelete() doGet() Signature @HttpGet global static void doGet() doPost() Signature @HttpPost global static void doPost() doPut() Signature @HttpPut global static void doPut() getAssetImageBaseUrl() Signature private static String getAssetImageBaseUrl() logError(e, method, body) Signature private static void logError(Exception e,String method,string body)"
    },
    {
        "title": "RestServiceRealEstateTest",
        "fileName": "RestServiceRealEstateTest.html",
        "text": "RestServiceRealEstateTest Signature @isTest public class RestServiceRealEstateTest RestServiceRealEstateTest Methods doDeleteInvalidId() doDeleteNullId() doDeleteSuccess() doGetInvalidId() doGetNullId() doGetSuccess() doPostBlankAssetId() doPostException() doPostInvalidAccountId() doPostInvalidAsset() doPostInvalidBody() doPostInvalidEvaluation() doPostInvalidLinks() doPostNonExsitingAccountId() doPostSuccess() doPutBlankAssetId() doPutException() doPutInvalidAsset() doPutInvalidAssetId() doPutInvalidBody() doPutInvalidEvaluation() doPutInvalidLinks() doPutSuccess() doDeleteInvalidId() Signature @isTest static void doDeleteInvalidId() doDeleteNullId() Signature @isTest static void doDeleteNullId() doDeleteSuccess() Signature @isTest static void doDeleteSuccess() doGetInvalidId() Signature @isTest static void doGetInvalidId() doGetNullId() Signature @isTest static void doGetNullId() doGetSuccess() Signature @isTest static void doGetSuccess() doPostBlankAssetId() Signature @isTest static void doPostBlankAssetId() doPostException() Signature @isTest static void doPostException() doPostInvalidAccountId() Signature @isTest static void doPostInvalidAccountId() doPostInvalidAsset() Signature @isTest static void doPostInvalidAsset() doPostInvalidBody() Signature @isTest static void doPostInvalidBody() doPostInvalidEvaluation() Signature @isTest static void doPostInvalidEvaluation() doPostInvalidLinks() Signature @isTest static void doPostInvalidLinks() doPostNonExsitingAccountId() Signature @isTest static void doPostNonExsitingAccountId() doPostSuccess() Signature @isTest static void doPostSuccess() doPutBlankAssetId() Signature @isTest static void doPutBlankAssetId() doPutException() Signature @isTest static void doPutException() doPutInvalidAsset() Signature @isTest static void doPutInvalidAsset() doPutInvalidAssetId() Signature @isTest static void doPutInvalidAssetId() doPutInvalidBody() Signature @isTest static void doPutInvalidBody() doPutInvalidEvaluation() Signature @isTest static void doPutInvalidEvaluation() doPutInvalidLinks() Signature @isTest static void doPutInvalidLinks() doPutSuccess() Signature @isTest static void doPutSuccess()"
    },
    {
        "title": "RestServiceTranslation",
        "fileName": "RestServiceTranslation.html",
        "text": "RestServiceTranslation Signature @RestResource(UrlMapping='/Translation/*/*/*') global class RestServiceTranslation RestServiceTranslation Methods doGet() logError(e, method) doGet() Signature @HttpGet global static void doGet() logError(e, method) Signature @testVisible private static void logError(Exception e,String method)"
    },
    {
        "title": "RestServiceTranslationTest",
        "fileName": "RestServiceTranslationTest.html",
        "text": "RestServiceTranslationTest Signature @isTest public class RestServiceTranslationTest RestServiceTranslationTest Methods doGetInvalidField() doGetInvlaidMetadata() doGetInvlaidObject() doGetSuccess() logErrorTest() doGetInvalidField() Signature @isTest static void doGetInvalidField() doGetInvlaidMetadata() Signature @isTest static void doGetInvlaidMetadata() doGetInvlaidObject() Signature @isTest static void doGetInvlaidObject() doGetSuccess() Signature @isTest static void doGetSuccess() logErrorTest() Signature @isTest static void logErrorTest()"
    },
    {
        "title": "RestServiceWebLead",
        "fileName": "RestServiceWebLead.html",
        "text": "RestServiceWebLead Signature @RestResource(UrlMapping='/generate/lead/*') global without sharing  class RestServiceWebLead RestServiceWebLead Methods doPost() doPost() Signature @HttpPost global static void doPost()"
    },
    {
        "title": "RestServiceWebLeadTest",
        "fileName": "RestServiceWebLeadTest.html",
        "text": "RestServiceWebLeadTest Signature @IsTest public class RestServiceWebLeadTest RestServiceWebLeadTest Methods doPostNewLead() doPostUpdateAccount() doPostUpdateLead() doPostNewLead() Signature @isTest static void doPostNewLead() doPostUpdateAccount() Signature @isTest static void doPostUpdateAccount() doPostUpdateLead() Signature @isTest static void doPostUpdateLead()"
    },
    {
        "title": "Salesforce",
        "fileName": "Salesforce.html",
        "text": "Salesforce Signature public inherited  sharing class Salesforce Salesforce Properties Name Signature BASE_URL private static final String BASE_URL baseUrl public static String baseUrl edition public static String edition INSTANCE_NAME private static final String INSTANCE_NAME IS_SANDBOX private static final Boolean IS_SANDBOX isCompactLayout public static Boolean isCompactLayout isSandbox public static Boolean isSandbox ORG_TYPE private static final String ORG_TYPE USER_LAYOUT_PREFRENCE private static final String USER_LAYOUT_PREFRENCE"
    },
    {
        "title": "SalesforceTest",
        "fileName": "SalesforceTest.html",
        "text": "SalesforceTest Signature @isTest public class SalesforceTest SalesforceTest Methods testSalesforce() testSalesforce() Signature @isTest static void testSalesforce()"
    },
    {
        "title": "SchemaUtil",
        "fileName": "SchemaUtil.html",
        "text": "SchemaUtil Signature public inherited sharing class SchemaUtil SchemaUtil Methods getAllObjectFields(sObjectApiName) getDependentPicklistValues(dependentField) getObjectPicklistFileds(sObjectName) getRecordTypeId() getSobjectType(objectApiName) getAllObjectFields(sObjectApiName) Signature public static Map<String, DescribeFieldResult> getAllObjectFields(String sObjectApiName) getDependentPicklistValues(dependentField) Signature public static Map<Object,List<String>> getDependentPicklistValues(Schema.sObjectField dependentField) getObjectPicklistFileds(sObjectName) Signature public static Map<String,PicklistEntry[]> getObjectPicklistFileds(DescribeSObjectResult sObjectName) getRecordTypeId() Signature public static String getRecordTypeId(final String recordTypeDevName, final String objectAPIName) getSobjectType(objectApiName) Signature public static DescribeSobjectResult getSobjectType(String objectApiName)"
    },
    {
        "title": "SchemaUtilTest",
        "fileName": "SchemaUtilTest.html",
        "text": "SchemaUtilTest Signature public class SchemaUtilTest SchemaUtilTest Methods getAllObjectFieldsTest() getObjectPicklistFiledsTest() getAllObjectFieldsTest() Signature @isTest static void getAllObjectFieldsTest() getObjectPicklistFiledsTest() Signature @isTest static void getObjectPicklistFiledsTest()"
    },
    {
        "title": "SiteLoginController",
        "fileName": "SiteLoginController.html",
        "text": "SiteLoginController An apex page controller that exposes the site login functionality Signature global with sharing class SiteLoginController SiteLoginController Properties Name Signature password global String password username global String username SiteLoginController Constructors SiteLoginController() SiteLoginController() Signature global SiteLoginController() SiteLoginController Methods login() login() Signature global PageReference login()"
    },
    {
        "title": "SiteLoginControllerTest",
        "fileName": "SiteLoginControllerTest.html",
        "text": "SiteLoginControllerTest An apex page controller that exposes the site login functionality Signature @IsTest global with sharing class SiteLoginControllerTest"
    },
    {
        "title": "SiteRegisterController",
        "fileName": "SiteRegisterController.html",
        "text": "SiteRegisterController An apex class that creates a portal user Signature public with sharing class SiteRegisterController SiteRegisterController Properties Name Signature communityNickname public String communityNickname confirmPassword public String confirmPassword email public String email password public String password PORTAL_ACCOUNT_ID private static Id PORTAL_ACCOUNT_ID username public String username SiteRegisterController Constructors SiteRegisterController() SiteRegisterController() Signature public SiteRegisterController() SiteRegisterController Methods isValidPassword() registerUser() isValidPassword() Signature private boolean isValidPassword() registerUser() Signature public PageReference registerUser()"
    },
    {
        "title": "SiteRegisterControllerTest",
        "fileName": "SiteRegisterControllerTest.html",
        "text": "SiteRegisterControllerTest Class containing tests for SiteRegisterController Signature @IsTest public with sharing class SiteRegisterControllerTest"
    },
    {
        "title": "SMI_OpportuntiyInvestmentService",
        "fileName": "SMI_OpportuntiyInvestmentService.html",
        "text": "SMI_OpportuntiyInvestmentService Signature public class SMI_OpportuntiyInvestmentService SMI_OpportuntiyInvestmentService Methods logError(e, recordID, objectName, componentName, methodName, operation) sendMoneyTransferConformation(oppId) sendStatusToEV(oppIds) logError(e, recordID, objectName, componentName, methodName, operation) Signature private static String logError(Exception e,String recordID,String objectName,String componentName,String methodName,String operation) sendMoneyTransferConformation(oppId) Signature @AuraEnabled public static void sendMoneyTransferConformation(String oppId) sendStatusToEV(oppIds) Signature @InvocableMethod(label='Send Investment Status to EV') public static void sendStatusToEV(List<String> oppIds)"
    },
    {
        "title": "SolarisbankAdminPanal",
        "fileName": "SolarisbankAdminPanal.html",
        "text": "SolarisbankAdminPanal Signature public class SolarisbankAdminPanal SolarisbankAdminPanal Methods getTermDepositeStatus(recordId) toggleTermDepostForUser(recordId, status, termDepositReason) getTermDepositeStatus(recordId) Signature @AuraEnabled public static Boolean getTermDepositeStatus(String recordId) toggleTermDepostForUser(recordId, status, termDepositReason) Signature @AuraEnabled public static Boolean toggleTermDepostForUser(String recordId,Boolean status,String termDepositReason)"
    },
    {
        "title": "SolarisbankAdminPanalTest",
        "fileName": "SolarisbankAdminPanalTest.html",
        "text": "SolarisbankAdminPanalTest Signature @isTest public class SolarisbankAdminPanalTest SolarisbankAdminPanalTest Methods getTermDepositeStatusTest() toggleTermDepostForUserTest() getTermDepositeStatusTest() Signature @isTest static void getTermDepositeStatusTest() toggleTermDepostForUserTest() Signature @isTest static void toggleTermDepostForUserTest()"
    },
    {
        "title": "SolarisbankBankAccountWrapper",
        "fileName": "SolarisbankBankAccountWrapper.html",
        "text": "SolarisbankBankAccountWrapper Signature public class SolarisbankBankAccountWrapper SolarisbankBankAccountWrapper Properties Name Signature bic public String bic closure_reasons public String closure_reasons error public Boolean error iban public String iban id public String id legal_closure_date public Date legal_closure_date locking_reasons public List<String> locking_reasons locking_status public String locking_status person_id public String person_id purpose public String purpose status public String status technical_closure_date public Date technical_closure_date type_Z public String type_Z SolarisbankBankAccountWrapper Constructors SolarisbankBankAccountWrapper() SolarisbankBankAccountWrapper(parser) SolarisbankBankAccountWrapper() SolarisbankBankAccountWrapper() Signature public SolarisbankBankAccountWrapper() SolarisbankBankAccountWrapper(parser) Signature public SolarisbankBankAccountWrapper(JSONParser  parser) SolarisbankBankAccountWrapper() Signature return new SolarisbankBankAccountWrapper(p) SolarisbankBankAccountWrapper Methods arrayOfLocking_reasons(p) arrayOfSolarisbankBankAccountWrapper(p) arrayOfString(p) consumeObject(parser) objectOfSolarisbankBankAccountWrapper(p) parse(json) parseError(jsonString) parseList(json) arrayOfLocking_reasons(p) Signature private static List<Locking_reasons> arrayOfLocking_reasons(System.JSONParser p) arrayOfSolarisbankBankAccountWrapper(p) Signature private static List<SolarisbankBankAccountWrapper> arrayOfSolarisbankBankAccountWrapper(System.JSONParser p) arrayOfString(p) Signature private static List<String> arrayOfString(System.JSONParser p) consumeObject(parser) Signature public static void consumeObject(System.JSONParser parser) objectOfSolarisbankBankAccountWrapper(p) Signature private static SolarisbankBankAccountWrapper objectOfSolarisbankBankAccountWrapper(System.JSONParser p) parse(json) Signature public static SolarisbankBankAccountWrapper parse(String json) parseError(jsonString) Signature public static Errors parseError(String jsonString) parseList(json) Signature public static List<SolarisbankBankAccountWrapper> parseList(String json) SolarisbankBankAccountWrapper.Errors Signature public class Errors SolarisbankBankAccountWrapper.Errors Properties Name Signature Annotations detail public String detail @AuraEnabled errors public List<Errors> errors @AuraEnabled id public String id @AuraEnabled title public String title @AuraEnabled SolarisbankBankAccountWrapper.Locking_reasons Signature public class Locking_reasons SolarisbankBankAccountWrapper.Locking_reasons Constructors Locking_reasons(parser) Locking_reasons(parser) Signature public Locking_reasons(JSONParser parser) SolarisbankBankAccountWrapper.MockResponse Signature public class MockResponse implements HttpCalloutMock SolarisbankBankAccountWrapper.MockResponse Methods respond(req) respond(req) Signature public HTTPResponse respond(HTTPRequest req)"
    },
    {
        "title": "SolarisbankBookingsWrapper",
        "fileName": "SolarisbankBookingsWrapper.html",
        "text": "SolarisbankBookingsWrapper Signature public class SolarisbankBookingsWrapper SolarisbankBookingsWrapper Properties Name Signature amount public Amount amount booking_date public String booking_date booking_type public String booking_type creation_date public String creation_date creditor_identifier public String creditor_identifier description public String description end_to_end_id public String end_to_end_id id public String id mandate_reference public String mandate_reference meta_info public String meta_info purpose_code public String purpose_code receiver_iban_virtual public String receiver_iban_virtual recipient_bic public String recipient_bic recipient_iban public String recipient_iban recipient_name public String recipient_name reconciliation_id public String reconciliation_id recorded_at public String recorded_at return_transaction_id public String return_transaction_id sender_bic public String sender_bic sender_iban public String sender_iban sender_name public String sender_name sepa_charges public Amount sepa_charges sepa_return_code public String sepa_return_code sepa_return_reason public String sepa_return_reason sepa_return_reason_definition public String sepa_return_reason_definition transaction_id public String transaction_id valuta_date public String valuta_date SolarisbankBookingsWrapper Methods parseList(json) parseList(json) Signature public static List<SolarisbankBookingsWrapper> parseList(String json) SolarisbankBookingsWrapper.Amount Signature public class Amount SolarisbankBookingsWrapper.Amount Properties Name Signature unit public String unit value public Integer value SolarisbankBookingsWrapper.MockResponse Signature public class MockResponse implements HttpCalloutMock SolarisbankBookingsWrapper.MockResponse Methods respond(req) respond(req) Signature public HTTPResponse respond(HTTPRequest req)"
    },
    {
        "title": "SolarisbankCardWrapper",
        "fileName": "SolarisbankCardWrapper.html",
        "text": "SolarisbankCardWrapper Signature public class SolarisbankCardWrapper SolarisbankCardWrapper Properties Name Signature account_id public String account_id business_id public String business_id creation_date Public String creation_date expiration_date public String expiration_date id public String id person_id public String person_id representation public Representation representation sia_account_number public String sia_account_number status public String status type_Z public String type_Z SolarisbankCardWrapper Constructors SolarisbankCardWrapper() SolarisbankCardWrapper(parser) SolarisbankCardWrapper() Signature public SolarisbankCardWrapper() SolarisbankCardWrapper(parser) Signature public SolarisbankCardWrapper(JSONParser parser) SolarisbankCardWrapper Methods arrayOfSolarisbankCardWrapper(p) consumeObject(parser) parseList(json) res.add(SolarisbankCardWrapper(p) arrayOfSolarisbankCardWrapper(p) Signature private static List<SolarisbankCardWrapper> arrayOfSolarisbankCardWrapper(System.JSONParser p) consumeObject(parser) Signature public static void consumeObject(System.JSONParser parser) parseList(json) Signature public static List<SolarisbankCardWrapper> parseList(String json) res.add(SolarisbankCardWrapper(p) Signature res.add(new SolarisbankCardWrapper(p)) SolarisbankCardWrapper.MockResponse Signature public class MockResponse implements HttpCalloutMock SolarisbankCardWrapper.MockResponse Methods respond(req) respond(req) Signature public HTTPResponse respond(HTTPRequest req) SolarisbankCardWrapper.Representation Signature public class Representation SolarisbankCardWrapper.Representation Properties Name Signature formatted_expiration_date public String formatted_expiration_date line_1 public String line_1 masked_pan public String masked_pan SolarisbankCardWrapper.Representation Constructors Representation() Representation(parser) Representation() Signature public Representation() Representation(parser) Signature public Representation(JSONParser parser)"
    },
    {
        "title": "SolarisbankCRPRequestWrapper",
        "fileName": "SolarisbankCRPRequestWrapper.html",
        "text": "SolarisbankCRPRequestWrapper Signature public class SolarisbankCRPRequestWrapper SolarisbankCRPRequestWrapper Properties Name Signature Annotations created_at public DateTime created_at @AuraEnabled errors public List<errorsWrapper> errors @AuraEnabled id public String id @AuraEnabled status public String status @AuraEnabled updated_at public DateTime updated_at @AuraEnabled url public String url @AuraEnabled SolarisbankCRPRequestWrapper Methods parse(json) parse(json) Signature public static SolarisbankCRPRequestWrapper parse(String json) SolarisbankCRPRequestWrapper.errorsWrapper Signature Public class errorsWrapper SolarisbankCRPRequestWrapper.errorsWrapper Properties Name Signature Annotations code public String code @AuraEnabled detail public String detail @AuraEnabled id public String id @AuraEnabled title public String title @AuraEnabled SolarisbankCRPRequestWrapper.MockResponse Signature public class MockResponse implements HttpCalloutMock SolarisbankCRPRequestWrapper.MockResponse Constructors MockResponse() MockResponse(isError) MockResponse() Signature public MockResponse() MockResponse(isError) Signature public MockResponse(Boolean isError) SolarisbankCRPRequestWrapper.MockResponse Methods respond(req) respond(req) Signature public HTTPResponse respond(HTTPRequest req)"
    },
    {
        "title": "SolarisBankIdentificationAttempt",
        "fileName": "SolarisBankIdentificationAttempt.html",
        "text": "SolarisBankIdentificationAttempt Signature public class SolarisBankIdentificationAttempt SolarisBankIdentificationAttempt Properties Name Signature id public String id payload public Payload payload reason public String reason result public String result SolarisBankIdentificationAttempt Methods getIdentificationDocumentNumber(jsonValue) parseList(json) getIdentificationDocumentNumber(jsonValue) Signature public static String getIdentificationDocumentNumber(string jsonValue) parseList(json) Signature public static List<SolarisBankIdentificationAttempt> parseList(String json) SolarisBankIdentificationAttempt.Address Signature public class Address SolarisBankIdentificationAttempt.Address Properties Name Signature city public Birthday city country public Birthday country street public Birthday street zipcode public Birthday zipcode SolarisBankIdentificationAttempt.Birthday Signature public class Birthday SolarisBankIdentificationAttempt.Birthday Properties Name Signature original public String original status public String status value public String value SolarisBankIdentificationAttempt.Contactdata Signature public class Contactdata SolarisBankIdentificationAttempt.Contactdata Properties Name Signature email public String email mobilephone public String mobilephone SolarisBankIdentificationAttempt.Customdata Signature public class Customdata SolarisBankIdentificationAttempt.Customdata Properties Name Signature custom1 public String custom1 custom2 public String custom2 custom3 public String custom3 custom4 public String custom4 custom5 public String custom5 SolarisBankIdentificationAttempt.Identificationdocument Signature public class Identificationdocument SolarisBankIdentificationAttempt.Identificationdocument Properties Name Signature country public Birthday country dateissued public Birthday dateissued issuedby public Birthday issuedby number_Z public Birthday number_Z type public Birthday type validuntil public Birthday validuntil SolarisBankIdentificationAttempt.Identificationprocess Signature public class Identificationprocess SolarisBankIdentificationAttempt.Identificationprocess Properties Name Signature agentname public String agentname companyid public String companyid id public String id identificationtime public String identificationtime result public String result transactionnumber public String transactionnumber type public String type SolarisBankIdentificationAttempt.MockResponse Signature public class MockResponse implements HttpCalloutMock SolarisBankIdentificationAttempt.MockResponse Methods respond(req) respond(req) Signature public HTTPResponse respond(HTTPRequest req) SolarisBankIdentificationAttempt.Payload Signature public class Payload SolarisBankIdentificationAttempt.Payload Properties Name Signature contactdata public Contactdata contactdata customdata public Customdata customdata identificationdocument public Identificationdocument identificationdocument identificationprocess public Identificationprocess identificationprocess userdata public Userdata userdata SolarisBankIdentificationAttempt.Userdata Signature public class Userdata SolarisBankIdentificationAttempt.Userdata Properties Name Signature address public Address address birthday public Birthday birthday birthname public Birthday birthname birthplace public Birthday birthplace firstname public Birthday firstname lastname public Birthday lastname nationality public Birthday nationality title public Birthday title"
    },
    {
        "title": "SolarisBankIdentificationWrapper",
        "fileName": "SolarisBankIdentificationWrapper.html",
        "text": "SolarisBankIdentificationWrapper Signature public class SolarisBankIdentificationWrapper SolarisBankIdentificationWrapper Properties Name Signature Annotations completed_at public String completed_at @AuraEnabled failure_reason public String failure_reason @AuraEnabled id public String id @AuraEnabled identification_id public String identification_id @AuraEnabled language public String language @AuraEnabled method public String method @AuraEnabled reference public String reference @AuraEnabled state public String state @AuraEnabled status public String status @AuraEnabled url public String url @AuraEnabled SolarisBankIdentificationWrapper Methods parse(json) parseList(json) parse(json) Signature @AuraEnabled public static SolarisBankIdentificationWrapper parse(String json) parseList(json) Signature @AuraEnabled public static List<SolarisBankIdentificationWrapper> parseList(String json) SolarisBankIdentificationWrapper.MockResponse Signature public class MockResponse implements HttpCalloutMock SolarisBankIdentificationWrapper.MockResponse Methods respond(req) respond(req) Signature public HTTPResponse respond(HTTPRequest req)"
    },
    {
        "title": "SolarisbankPersonWrapper",
        "fileName": "SolarisbankPersonWrapper.html",
        "text": "SolarisbankPersonWrapper Signature public class SolarisbankPersonWrapper SolarisbankPersonWrapper Properties Name Signature Annotations address public Person_Address address @AuraEnabled aml_confirmed_on public Date aml_confirmed_on @AuraEnabled aml_follow_up_date public Date aml_follow_up_date @AuraEnabled birth_city public String birth_city @AuraEnabled birth_country public String birth_country @AuraEnabled birth_date public String birth_date @AuraEnabled birth_name public String birth_name @AuraEnabled business_address_line_1 Public String business_address_line_1 @AuraEnabled business_address_line_2 Public String business_address_line_2 @AuraEnabled business_city Public String business_city @AuraEnabled business_country Public String business_country @AuraEnabled business_postal_code Public String business_postal_code @AuraEnabled business_purpose public String business_purpose @AuraEnabled contact_address public Person_Address contact_address @AuraEnabled customer_vetting_status Public String customer_vetting_status @AuraEnabled email public String email @AuraEnabled employment_status public String employment_status @AuraEnabled expected_monthly_revenue_cents Public Integer expected_monthly_revenue_cents @AuraEnabled fatca_crs_confirmed_at public String fatca_crs_confirmed_at @AuraEnabled fatca_relevant public Boolean fatca_relevant @AuraEnabled first_name public String first_name @AuraEnabled flagged_by_compliance public Boolean flagged_by_compliance @AuraEnabled id public String id @AuraEnabled industry public String industry @AuraEnabled industry_key public String industry_key @AuraEnabled job_title public String job_title @AuraEnabled last_name public String last_name @AuraEnabled mobile_number public String mobile_number @AuraEnabled nace_code Public String nace_code @AuraEnabled nationality public String nationality @AuraEnabled own_economic_interest_signed_at public String own_economic_interest_signed_at @AuraEnabled risk_classification_status Public String risk_classification_status @AuraEnabled salutation public String salutation @AuraEnabled screening_progress Public String screening_progress @AuraEnabled tax_information public Tax_information tax_information @AuraEnabled terms_conditions_signed_at public String terms_conditions_signed_at @AuraEnabled title public String title @AuraEnabled vat_number Public String vat_number @AuraEnabled SolarisbankPersonWrapper Methods parse(json) parse(json) Signature @AuraEnabled public static SolarisbankPersonWrapper parse(String json) SolarisbankPersonWrapper.MockResponse Signature public class MockResponse implements HttpCalloutMock SolarisbankPersonWrapper.MockResponse Constructors MockResponse() MockResponse(isError) MockResponse() Signature public MockResponse() MockResponse(isError) Signature public MockResponse(Boolean isError) SolarisbankPersonWrapper.MockResponse Methods respond(req) respond(req) Signature public HTTPResponse respond(HTTPRequest req) SolarisbankPersonWrapper.Person_Address Signature public class Person_Address SolarisbankPersonWrapper.Person_Address Properties Name Signature Annotations city public String city @AuraEnabled country public String country @AuraEnabled line_1 public String line_1 @AuraEnabled line_2 public String line_2 @AuraEnabled postal_code public String postal_code @AuraEnabled state public String state @AuraEnabled SolarisbankPersonWrapper.Tax_information Signature public class Tax_information SolarisbankPersonWrapper.Tax_information Properties Name Signature Annotations marital_status public String marital_status @AuraEnabled tax_assessment public String tax_assessment @AuraEnabled"
    },
    {
        "title": "SolarisbankReservationWrapper",
        "fileName": "SolarisbankReservationWrapper.html",
        "text": "SolarisbankReservationWrapper Signature public class SolarisbankReservationWrapper SolarisbankReservationWrapper Properties Name Signature amount public Amount amount description public String description expired_at public String expired_at expires_at public String expires_at id public String id meta_info public String meta_info reference public String reference reservation_type public String reservation_type resolved_at public String resolved_at status public String status SolarisbankReservationWrapper Methods parseList(json) parseList(json) Signature public static List<SolarisbankReservationWrapper> parseList(String json) SolarisbankReservationWrapper.Amount Signature public class Amount SolarisbankReservationWrapper.Amount Properties Name Signature unit public String unit value public Integer value SolarisbankReservationWrapper.MockResponse Signature public class MockResponse implements HttpCalloutMock SolarisbankReservationWrapper.MockResponse Methods respond(req) respond(req) Signature public HTTPResponse respond(HTTPRequest req)"
    },
    {
        "title": "SolarisbankService",
        "fileName": "SolarisbankService.html",
        "text": "SolarisbankService Signature public inherited  sharing class SolarisbankService SolarisbankService Properties Name Signature access_token private static String access_token AUTH private static  String AUTH AUTH_URI private static  String AUTH_URI BANK_STATEMENT private static final String BANK_STATEMENT BLOCK_CARD private static  String BLOCK_CARD BOOKINGS_URI private static  String BOOKINGS_URI CANCEL_TIMED_BOOKING private static final String CANCEL_TIMED_BOOKING CLIENT_ID private static  String CLIENT_ID CLIENT_SECRET private static  String CLIENT_SECRET CLOSE_CARD private static  String CLOSE_CARD DETAILS_CARD private static  String DETAILS_CARD GET_ACCOUNT_BALANCE private static final String GET_ACCOUNT_BALANCE GET_ALL_BANK_ACCOUNTS private static final String GET_ALL_BANK_ACCOUNTS Get_ALL_CARDS private static final String Get_ALL_CARDS GET_ALL_ESigning_ATTEPMTS private static final String GET_ALL_ESigning_ATTEPMTS GET_ALL_IDENTIFICATION_ATTEPMTS private static final String GET_ALL_IDENTIFICATION_ATTEPMTS GET_ALL_STANDING_ORDERS private static final String GET_ALL_STANDING_ORDERS GET_ALL_TAX_IDENTIFIACTION private static final String GET_ALL_TAX_IDENTIFIACTION GET_ALL_TIMED_BOOKINGS private static final String GET_ALL_TIMED_BOOKINGS GET_BANK_STATEMENT private static final String GET_BANK_STATEMENT GET_IDENTIFICATION_ATTEMPT_DETAILS private static final String GET_IDENTIFICATION_ATTEMPT_DETAILS GET_IDENTIFICATION_DETAILS private static final String GET_IDENTIFICATION_DETAILS GET_IDENTIFICATION_REQUEST_DETAILS private static final String GET_IDENTIFICATION_REQUEST_DETAILS GET_PERSON_DETAILS private static final String GET_PERSON_DETAILS GET_PHONE_NUMBER private static final String GET_PHONE_NUMBER GET_SEPACT_TRANSACTION_DETAILS private static  String GET_SEPACT_TRANSACTION_DETAILS GET_SEPADD_TRANSACTION_DETIALS private static  STRING GET_SEPADD_TRANSACTION_DETIALS GET_STATEMENT_OF_ACCOUNT private static final String GET_STATEMENT_OF_ACCOUNT HOST_URL private static  String HOST_URL PATCH_CUSTOMER_DETAILS private static final String PATCH_CUSTOMER_DETAILS POST_CLOSE_ACCOUNT private static final String POST_CLOSE_ACCOUNT POST_CREATE_NEW_CARD private static final String POST_CREATE_NEW_CARD POST_MFA_START private static final String POST_MFA_START PROXY_KEY private static  String PROXY_KEY PUT_MFA_START private static final String PUT_MFA_START RESERVATION_URI private static  String RESERVATION_URI STATEMENT_OF_ACCOUNT private static final String STATEMENT_OF_ACCOUNT UNBLOCK_CARD private static  String UNBLOCK_CARD SolarisbankService Methods blockAccountCard(cardId, details) cancelTimedOrder(solarisPersonAccountId, solarisBankAccountId, timedOrderId, details) closeAccountCard(cardId, details) confirmCRPRequest(tanUrl, solarisbankPersonId, tanOtp, details) createBankStatementByPeriod(accountId, body, details) createBankStatementByRange(accountId, body, details) createNewIdentificationAttempt(solarisPersonId, body, details) fetchAccountBalance(solarisBankAccountId, details) fetchAccountCard(cardId, details) fetchAllBankAccounts(solarisPersonId, details) fetchAllCards(solarisPersonId, details) fetchAllESigningAttempts(solarisPersonId, details) fetchAllIdentificationAttempts(solarisPersonId, details) fetchAllTaxIdentificationAttempts(solarisPersonId, details) fetchBankAccountBookings(bankAccountId, pageNumber, bookingDateStart, bookingDateEnd, recepientIban, details) fetchBankAccountReservations(bankAccountId, pageNumber, expireDateStart, expiresDateEnd, refrenceId, details) fetchBankStandingOrders(solarisPersonAccountId, solarisBankAccountId, details) fetchBankStatementByPeriod(accountId, statementId, details) fetchBankStatementByRange(accountId, statementId, details) fetchBankTimedOrders(solarisPersonAccountId, solarisBankAccountId, details) fetchIdentificationAttemptDetails(solarisPersonId, solarisIdentificationId, details) fetchIdentificationDetails(solarisPersonId, solarisIdentificationId, details) fetchIdentificationRequestDetails(solarisPersonId, solarisIdentificationId, details) fetchPersonDetails(solarisPersonId, details) fetchPersonPhoneNumber(solarisPersonId, details) fetchSepaCreditTransfer(solarisPersonAccountId, solarisBankAccountId, transactionId, details) fetchSepaDirectDebit(solarisPersonAccountId, solarisBankAccountId, transactionId, details) getAccessToken(tenentType) getApiDetails(tenentType) getHeaders(tenentType) initiateCRPRequest(tanUrl, solarisbankPersonId, details) requestCloseAccount(body, details) requestNewCard(solarisbankPersonId, solrisBankAccountId, body, details) startMFA(solarisbankPersonId, details) stopMFA(mfaId, otp, details) unblockAccountCard(cardId, details) updateCustomerData(solarisbankPersonId, body, details) blockAccountCard(cardId, details) Signature public static String blockAccountCard(String cardId,LogService.ApiCallDetails details) cancelTimedOrder(solarisPersonAccountId, solarisBankAccountId, timedOrderId, details) Signature public static String cancelTimedOrder(String solarisPersonAccountId,String solarisBankAccountId,String timedOrderId,LogService.ApiCallDetails details) closeAccountCard(cardId, details) Signature public static String closeAccountCard(String cardId,LogService.ApiCallDetails details) confirmCRPRequest(tanUrl, solarisbankPersonId, tanOtp, details) Signature public static String confirmCRPRequest(String tanUrl,String solarisbankPersonId,String tanOtp,LogService.ApiCallDetails details) createBankStatementByPeriod(accountId, body, details) Signature public static String createBankStatementByPeriod(String accountId,String body,LogService.ApiCallDetails details) createBankStatementByRange(accountId, body, details) Signature public static String createBankStatementByRange(String accountId,String body,LogService.ApiCallDetails details) createNewIdentificationAttempt(solarisPersonId, body, details) Signature public static String createNewIdentificationAttempt(String solarisPersonId,String body,LogService.ApiCallDetails details) fetchAccountBalance(solarisBankAccountId, details) Signature public static String fetchAccountBalance(String solarisBankAccountId,LogService.ApiCallDetails details) fetchAccountCard(cardId, details) Signature public static String fetchAccountCard(String cardId,LogService.ApiCallDetails details) fetchAllBankAccounts(solarisPersonId, details) Signature public static String fetchAllBankAccounts(String solarisPersonId,LogService.ApiCallDetails details) fetchAllCards(solarisPersonId, details) Signature public static String fetchAllCards(String solarisPersonId,LogService.ApiCallDetails details) fetchAllESigningAttempts(solarisPersonId, details) Signature public static String fetchAllESigningAttempts(String solarisPersonId,LogService.ApiCallDetails details) fetchAllIdentificationAttempts(solarisPersonId, details) Signature public static String fetchAllIdentificationAttempts(String solarisPersonId,LogService.ApiCallDetails details) fetchAllTaxIdentificationAttempts(solarisPersonId, details) Signature public static String fetchAllTaxIdentificationAttempts(String solarisPersonId,LogService.ApiCallDetails details) fetchBankAccountBookings(bankAccountId, pageNumber, bookingDateStart, bookingDateEnd, recepientIban, details) Signature public static String fetchBankAccountBookings(String bankAccountId,String pageNumber,String bookingDateStart,String bookingDateEnd,String recepientIban,LogService.ApiCallDetails details) fetchBankAccountReservations(bankAccountId, pageNumber, expireDateStart, expiresDateEnd, refrenceId, details) Signature public static String fetchBankAccountReservations(String bankAccountId,String pageNumber,String expireDateStart,String expiresDateEnd,String refrenceId,LogService.ApiCallDetails details) fetchBankStandingOrders(solarisPersonAccountId, solarisBankAccountId, details) Signature public static String fetchBankStandingOrders(String solarisPersonAccountId,String solarisBankAccountId,LogService.ApiCallDetails details) fetchBankStatementByPeriod(accountId, statementId, details) Signature public static String fetchBankStatementByPeriod(String accountId,String statementId,LogService.ApiCallDetails details) fetchBankStatementByRange(accountId, statementId, details) Signature public static String fetchBankStatementByRange(String accountId,String statementId,LogService.ApiCallDetails details) fetchBankTimedOrders(solarisPersonAccountId, solarisBankAccountId, details) Signature public static String fetchBankTimedOrders(String solarisPersonAccountId,String solarisBankAccountId,LogService.ApiCallDetails details) fetchIdentificationAttemptDetails(solarisPersonId, solarisIdentificationId, details) Signature public static String fetchIdentificationAttemptDetails(String solarisPersonId,String solarisIdentificationId,LogService.ApiCallDetails details) fetchIdentificationDetails(solarisPersonId, solarisIdentificationId, details) Signature public static String fetchIdentificationDetails(String solarisPersonId,String solarisIdentificationId,LogService.ApiCallDetails details) fetchIdentificationRequestDetails(solarisPersonId, solarisIdentificationId, details) Signature public static String fetchIdentificationRequestDetails(String solarisPersonId,String solarisIdentificationId,LogService.ApiCallDetails details) fetchPersonDetails(solarisPersonId, details) Signature public static String fetchPersonDetails(String solarisPersonId,LogService.ApiCallDetails details) fetchPersonPhoneNumber(solarisPersonId, details) Signature public static String fetchPersonPhoneNumber(String solarisPersonId,LogService.ApiCallDetails details) fetchSepaCreditTransfer(solarisPersonAccountId, solarisBankAccountId, transactionId, details) Signature public static String fetchSepaCreditTransfer(String solarisPersonAccountId,String solarisBankAccountId,String transactionId,LogService.ApiCallDetails details) fetchSepaDirectDebit(solarisPersonAccountId, solarisBankAccountId, transactionId, details) Signature public static String fetchSepaDirectDebit(String solarisPersonAccountId,String solarisBankAccountId,String transactionId,LogService.ApiCallDetails details) getAccessToken(tenentType) Signature public static String getAccessToken(String tenentType) getApiDetails(tenentType) Signature private static void getApiDetails(String tenentType) getHeaders(tenentType) Signature private static Map<String,String> getHeaders(String tenentType) initiateCRPRequest(tanUrl, solarisbankPersonId, details) Signature public static String initiateCRPRequest(String tanUrl,String solarisbankPersonId,LogService.ApiCallDetails details) requestCloseAccount(body, details) Signature public static String requestCloseAccount(String body,LogService.ApiCallDetails details) requestNewCard(solarisbankPersonId, solrisBankAccountId, body, details) Signature public static String requestNewCard(String solarisbankPersonId,String solrisBankAccountId,String body,LogService.ApiCallDetails details) startMFA(solarisbankPersonId, details) Signature public static String startMFA(String solarisbankPersonId,LogService.ApiCallDetails details) stopMFA(mfaId, otp, details) Signature public static String stopMFA(String mfaId,String otp,LogService.ApiCallDetails details) unblockAccountCard(cardId, details) Signature public static String unblockAccountCard(String cardId,LogService.ApiCallDetails details) updateCustomerData(solarisbankPersonId, body, details) Signature public static String updateCustomerData(String solarisbankPersonId,String body,LogService.ApiCallDetails details) SolarisbankService.CardResponse Signature public class CardResponse SolarisbankService.CardResponse Properties Name Signature Annotations detail public String detail @AuraEnabled errors public List<CardResponse> errors @AuraEnabled id public String id @AuraEnabled status public String status @AuraEnabled"
    },
    {
        "title": "SolarisbankServiceTest",
        "fileName": "SolarisbankServiceTest.html",
        "text": "SolarisbankServiceTest Signature @isTest public class SolarisbankServiceTest SolarisbankServiceTest Methods fetchAllTaxIdentificationAttempts() fetchIdentificationRequestDetailsTest() ffetchIdentificationAttemptDetailsTest() testcancelTimedOrder() testChangeCardStatus() testconfirmCRPRequest() testconfirmCRPRequestError() testcreateBankStatementByPeriod() testcreateBankStatementByRange() testcreateNewIdentificationAttempt() testfetchAccountBalance() testfetchAccountCard() testfetchAllBankAccounts() testfetchAllCards() testfetchAllESigningAttempts() testfetchAllIdentificationAttempts() testfetchBankAccountBookings() testfetchBankAccountReservations() testfetchBankStandingOrders() testfetchBankStatementByPeriod() testfetchBankStatementByRange() testfetchBankTimedOrders() testfetchIdentificationDetails() testfetchPersonDetails() testfetchPersonPhoneNumber() testfetchSepaCreditTransfer() testfetchSepaDirectDebit() testinitiateCRPRequest() testinitiateCRPRequestError() testrequestCloseAccount() testrequestCloseAccountError() testrequestNewCard() testrequestNewCardError() teststartMFA() teststopMFA() updateCustomerDatatest() fetchAllTaxIdentificationAttempts() Signature @isTest static void fetchAllTaxIdentificationAttempts() fetchIdentificationRequestDetailsTest() Signature @isTest static void fetchIdentificationRequestDetailsTest() ffetchIdentificationAttemptDetailsTest() Signature @isTest static void ffetchIdentificationAttemptDetailsTest() testcancelTimedOrder() Signature @isTest static void testcancelTimedOrder() testChangeCardStatus() Signature @isTest static void testChangeCardStatus() testconfirmCRPRequest() Signature @isTest static void testconfirmCRPRequest() testconfirmCRPRequestError() Signature @isTest static void testconfirmCRPRequestError() testcreateBankStatementByPeriod() Signature @isTest static void testcreateBankStatementByPeriod() testcreateBankStatementByRange() Signature @isTest static void testcreateBankStatementByRange() testcreateNewIdentificationAttempt() Signature @isTest static void testcreateNewIdentificationAttempt() testfetchAccountBalance() Signature @isTest static void testfetchAccountBalance() testfetchAccountCard() Signature @isTest static void testfetchAccountCard() testfetchAllBankAccounts() Signature @isTest static void testfetchAllBankAccounts() testfetchAllCards() Signature @isTest static void testfetchAllCards() testfetchAllESigningAttempts() Signature @isTest static void testfetchAllESigningAttempts() testfetchAllIdentificationAttempts() Signature @isTest static void testfetchAllIdentificationAttempts() testfetchBankAccountBookings() Signature @isTest static void testfetchBankAccountBookings() testfetchBankAccountReservations() Signature @isTest static void testfetchBankAccountReservations() testfetchBankStandingOrders() Signature @isTest static void testfetchBankStandingOrders() testfetchBankStatementByPeriod() Signature @isTest static void testfetchBankStatementByPeriod() testfetchBankStatementByRange() Signature @isTest static void testfetchBankStatementByRange() testfetchBankTimedOrders() Signature @isTest static void testfetchBankTimedOrders() testfetchIdentificationDetails() Signature @isTest static void testfetchIdentificationDetails() testfetchPersonDetails() Signature @isTest static void testfetchPersonDetails() testfetchPersonPhoneNumber() Signature @isTest static void testfetchPersonPhoneNumber() testfetchSepaCreditTransfer() Signature @isTest static void testfetchSepaCreditTransfer() testfetchSepaDirectDebit() Signature @isTest static void testfetchSepaDirectDebit() testinitiateCRPRequest() Signature @isTest static void testinitiateCRPRequest() testinitiateCRPRequestError() Signature @isTest static void testinitiateCRPRequestError() testrequestCloseAccount() Signature @isTest static void testrequestCloseAccount() testrequestCloseAccountError() Signature @isTest static void testrequestCloseAccountError() testrequestNewCard() Signature @isTest static void testrequestNewCard() testrequestNewCardError() Signature @isTest static void testrequestNewCardError() teststartMFA() Signature @isTest static void teststartMFA() teststopMFA() Signature @isTest static void teststopMFA() updateCustomerDatatest() Signature @isTest static void updateCustomerDatatest()"
    },
    {
        "title": "SolarisbankStandingOrderWrapper",
        "fileName": "SolarisbankStandingOrderWrapper.html",
        "text": "SolarisbankStandingOrderWrapper Signature public class SolarisbankStandingOrderWrapper SolarisbankStandingOrderWrapper Properties Name Signature amount public Amount amount description public String description end_to_end_id public String end_to_end_id first_execution_date public String first_execution_date id public String id last_execution_date public String last_execution_date month_end_execution public Boolean month_end_execution next_occurrence public String next_occurrence recipient_bic public String recipient_bic recipient_iban public String recipient_iban recipient_name public String recipient_name reference public String reference reoccurrence public String reoccurrence status public String status SolarisbankStandingOrderWrapper Methods parseList(json) parseList(json) Signature public static List<SolarisbankStandingOrderWrapper> parseList(String json) SolarisbankStandingOrderWrapper.Amount Signature public class Amount SolarisbankStandingOrderWrapper.Amount Properties Name Signature unit public String unit value public Integer value SolarisbankStandingOrderWrapper.MockResponse Signature public class MockResponse implements HttpCalloutMock SolarisbankStandingOrderWrapper.MockResponse Methods respond(req) respond(req) Signature public HTTPResponse respond(HTTPRequest req)"
    },
    {
        "title": "SolarisBankTaxIdentificationWrapper",
        "fileName": "SolarisBankTaxIdentificationWrapper.html",
        "text": "SolarisBankTaxIdentificationWrapper Signature public class SolarisBankTaxIdentificationWrapper SolarisBankTaxIdentificationWrapper Properties Name Signature country public String country id public String id number_Z public String number_Z primary public Boolean primary reason_description public String reason_description reason_no_tin public String reason_no_tin SolarisBankTaxIdentificationWrapper Constructors SolarisBankTaxIdentificationWrapper(parser) SolarisBankTaxIdentificationWrapper() SolarisBankTaxIdentificationWrapper(parser) Signature public SolarisBankTaxIdentificationWrapper(JSONParser parser) SolarisBankTaxIdentificationWrapper() Signature public SolarisBankTaxIdentificationWrapper() SolarisBankTaxIdentificationWrapper Methods arrayOfSolarisBankTaxIdentificationWrapper(p) consumeObject(parser) parseList(json) res.add(SolarisBankTaxIdentificationWrapper(p) arrayOfSolarisBankTaxIdentificationWrapper(p) Signature private static List<SolarisBankTaxIdentificationWrapper> arrayOfSolarisBankTaxIdentificationWrapper(System.JSONParser p) consumeObject(parser) Signature public static void consumeObject(System.JSONParser parser) parseList(json) Signature public static List<SolarisBankTaxIdentificationWrapper> parseList(String json) res.add(SolarisBankTaxIdentificationWrapper(p) Signature res.add(new SolarisBankTaxIdentificationWrapper(p)) SolarisBankTaxIdentificationWrapper.MockResponse Signature public class MockResponse implements HttpCalloutMock SolarisBankTaxIdentificationWrapper.MockResponse Methods respond(req) respond(req) Signature public HTTPResponse respond(HTTPRequest req)"
    },
    {
        "title": "SolarisbankTimedOrderWrapper",
        "fileName": "SolarisbankTimedOrderWrapper.html",
        "text": "SolarisbankTimedOrderWrapper Signature public class SolarisbankTimedOrderWrapper SolarisbankTimedOrderWrapper Properties Name Signature execute_at public String execute_at executed_at public String executed_at id public String id scheduled_transaction public Scheduled_transaction scheduled_transaction status public String status SolarisbankTimedOrderWrapper Methods parseList(json) parseObject(json) parseList(json) Signature public static List<SolarisbankTimedOrderWrapper> parseList(String json) parseObject(json) Signature public static SolarisbankTimedOrderWrapper parseObject(String json) SolarisbankTimedOrderWrapper.Amount Signature public class Amount SolarisbankTimedOrderWrapper.Amount Properties Name Signature unit public String unit value public Integer value SolarisbankTimedOrderWrapper.MockResponse Signature public class MockResponse implements HttpCalloutMock SolarisbankTimedOrderWrapper.MockResponse Methods respond(req) respond(req) Signature public HTTPResponse respond(HTTPRequest req) SolarisbankTimedOrderWrapper.Scheduled_transaction Signature public class Scheduled_transaction SolarisbankTimedOrderWrapper.Scheduled_transaction Properties Name Signature amount public Amount amount batch_id public String batch_id created_at public String created_at description public String description end_to_end_id public String end_to_end_id id public String id recipient_bic public String recipient_bic recipient_iban public String recipient_iban recipient_name public String recipient_name reference public String reference status public String status"
    },
    {
        "title": "SubscriptionService",
        "fileName": "SubscriptionService.html",
        "text": "SubscriptionService Signature public without sharing class SubscriptionService SubscriptionService Methods checkAndUpdateSubscriptionOnload(email, product) checkUnsubscribedStatus(email, product) getLastEmailSentInfo(subscriptionId) getUnsubscribeOptions() logError(e, recordID, objectName, componentName, methodName, operation) registerSubscription(email, productName, origin, website) registerWaitingListSubscriptionUser(email, product) updateSubscriptionToUnSubscribed(email, product, reason) updateSubscriptionWithConfirmation(email, product, salutation, lastName, firstName, termsAndConditions, phoneNumber, leadId) checkAndUpdateSubscriptionOnload(email, product) Signature @AuraEnabled public static leadWrapper checkAndUpdateSubscriptionOnload(String email, String product) checkUnsubscribedStatus(email, product) Signature @AuraEnabled public static Boolean checkUnsubscribedStatus(String email,String product) getLastEmailSentInfo(subscriptionId) Signature @AuraEnabled public static List<History_Tracker__c> getLastEmailSentInfo(String subscriptionId) getUnsubscribeOptions() Signature @AuraEnabled(cacheable=true) public static Map<String,String> getUnsubscribeOptions() logError(e, recordID, objectName, componentName, methodName, operation) Signature @testVisible private static String logError(Exception e,String recordID,String objectName,String componentName,String methodName,String operation) registerSubscription(email, productName, origin, website) Signature @AuraEnabled public static boolean registerSubscription(String email,String productName,String origin,String website) registerWaitingListSubscriptionUser(email, product) Signature @AuraEnabled public static void registerWaitingListSubscriptionUser(String email,String product) updateSubscriptionToUnSubscribed(email, product, reason) Signature @AuraEnabled public static Boolean updateSubscriptionToUnSubscribed(String email,String product,String reason) updateSubscriptionWithConfirmation(email, product, salutation, lastName, firstName, termsAndConditions, phoneNumber, leadId) Signature @AuraEnabled public static Boolean updateSubscriptionWithConfirmation(String email, String product, String salutation, String lastName, String firstName, Boolean termsAndConditions, String phoneNumber, String leadId) SubscriptionService.leadWrapper Signature public class leadWrapper SubscriptionService.leadWrapper Properties Name Signature Annotations leadId public Id leadId @AuraEnabled showForm public Boolean showForm @AuraEnabled"
    },
    {
        "title": "SubscriptionServiceTest",
        "fileName": "SubscriptionServiceTest.html",
        "text": "SubscriptionServiceTest Signature @isTest private class SubscriptionServiceTest SubscriptionServiceTest Methods logErrorTest() registerSubscriptionTest() testSubscription() testUnSubscription() logErrorTest() Signature @isTest static void logErrorTest() registerSubscriptionTest() Signature @isTest static void registerSubscriptionTest() testSubscription() Signature @isTest static void testSubscription() testUnSubscription() Signature @isTest static void testUnSubscription()"
    },
    {
        "title": "SyncAccountAndSolarisbankController",
        "fileName": "SyncAccountAndSolarisbankController.html",
        "text": "SyncAccountAndSolarisbankController Signature public without sharing  class SyncAccountAndSolarisbankController SyncAccountAndSolarisbankController Methods convertCentsToEuro(amount) coverTestclass() startSyncWithAuthO(sfAccountId) startSyncWithBank(sfAccountId) startSyncWithBankAccount(sfBankAccountId) convertCentsToEuro(amount) Signature @testVisible private static Decimal convertCentsToEuro(Decimal amount) coverTestclass() Signature @testvisible private static void coverTestclass() startSyncWithAuthO(sfAccountId) Signature @AuraEnabled public static void startSyncWithAuthO(String sfAccountId) startSyncWithBank(sfAccountId) Signature @AuraEnabled public static void startSyncWithBank(String sfAccountId) startSyncWithBankAccount(sfBankAccountId) Signature @AuraEnabled public static void startSyncWithBankAccount(String sfBankAccountId)"
    },
    {
        "title": "SyncAccountAndSolarisbankControllerTest",
        "fileName": "SyncAccountAndSolarisbankControllerTest.html",
        "text": "SyncAccountAndSolarisbankControllerTest Signature @isTest public class SyncAccountAndSolarisbankControllerTest SyncAccountAndSolarisbankControllerTest Methods coverTestClass() startSyncWithAuthOTest() teststartSyncWithBank() teststartSyncWithBankAccount() coverTestClass() Signature @isTest static void coverTestClass() startSyncWithAuthOTest() Signature @isTest static void startSyncWithAuthOTest() teststartSyncWithBank() Signature @isTest static void teststartSyncWithBank() teststartSyncWithBankAccount() Signature @isTest static void teststartSyncWithBankAccount() SyncAccountAndSolarisbankControllerTest.MockResponse Signature public class MockResponse implements HttpCalloutMock SyncAccountAndSolarisbankControllerTest.MockResponse Constructors MockResponse() MockResponse(solarisbankId) MockResponse() Signature public MockResponse() MockResponse(solarisbankId) Signature public MockResponse(String solarisbankId) SyncAccountAndSolarisbankControllerTest.MockResponse Methods respond(req) respond(req) Signature public HTTPResponse respond(HTTPRequest req)"
    },
    {
        "title": "SyncCampaignMembersController",
        "fileName": "SyncCampaignMembersController.html",
        "text": "SyncCampaignMembersController Signature public with sharing class SyncCampaignMembersController SyncCampaignMembersController Methods getCampaingMembersMap(campaignId) startSync(campaignId) getCampaingMembersMap(campaignId) Signature private static Map<String,CampaignMember> getCampaingMembersMap(String campaignId) startSync(campaignId) Signature @AuraEnabled public static void startSync(String campaignId)"
    },
    {
        "title": "SyncCampaignMembersControllerTest",
        "fileName": "SyncCampaignMembersControllerTest.html",
        "text": "SyncCampaignMembersControllerTest Signature @isTest public class SyncCampaignMembersControllerTest SyncCampaignMembersControllerTest Methods syncTest() testData() syncTest() Signature @isTest static void syncTest() testData() Signature @testSetup static void testData()"
    },
    {
        "title": "TaxExemptionFormController",
        "fileName": "TaxExemptionFormController.html",
        "text": "TaxExemptionFormController Signature public without sharing class TaxExemptionFormController TaxExemptionFormController Methods closeCRPFRequest(sfId, tanurl, otp, martialStatus) closeMFARequest(mfaId, otp, sfId) createTaxExemptionCase(accountId, bankAccountId, subject, description, reason) generateChangeLog(sbId, sfId, operation, status, details, url, updateAt) getCustomerDetails(sbId, authId, sfId) getPersonAccountRecordTypeId() initiateCRPRequest(sfId, requestChangebody) initiateMFARequest(sbId, sfId) closeCRPFRequest(sfId, tanurl, otp, martialStatus) Signature @AuraEnabled public static String closeCRPFRequest(String sfId,String tanurl,String otp,String martialStatus) closeMFARequest(mfaId, otp, sfId) Signature @AuraEnabled public static String closeMFARequest(String mfaId,String otp,String sfId) createTaxExemptionCase(accountId, bankAccountId, subject, description, reason) Signature @AuraEnabled public static void createTaxExemptionCase(String accountId,String bankAccountId,String subject,String description,String reason) generateChangeLog(sbId, sfId, operation, status, details, url, updateAt) Signature private static Change_Request_Log__c generateChangeLog(String sbId,String sfId,String operation,String status,String details,String url,DateTime updateAt) getCustomerDetails(sbId, authId, sfId) Signature @AuraEnabled(cacheable=true) public static Map<String,List<sObject>> getCustomerDetails(String sbId,String authId,String sfId) getPersonAccountRecordTypeId() Signature @AuraEnabled(cacheable=true) public static String getPersonAccountRecordTypeId() initiateCRPRequest(sfId, requestChangebody) Signature @AuraEnabled public static SolarisbankCRPRequestWrapper initiateCRPRequest(String sfId,String requestChangebody) initiateMFARequest(sbId, sfId) Signature @AuraEnabled public static String initiateMFARequest(String sbId,String sfId)"
    },
    {
        "title": "TaxExemptionFormControllerTest",
        "fileName": "TaxExemptionFormControllerTest.html",
        "text": "TaxExemptionFormControllerTest Signature @isTest public class TaxExemptionFormControllerTest TaxExemptionFormControllerTest Methods closeCRPFRequestError() closeCRPFRequestSuccess() closeMFARequestTest() createTaxExemptionCaseTest() getCustomerDetailsTest() getPersonAccountRecordTypeIdTest() initiateCRPRequestTestError() initiateCRPRequestTestSuccess() initiateMFARequestTest() closeCRPFRequestError() Signature @isTest static void closeCRPFRequestError() closeCRPFRequestSuccess() Signature @isTest static void closeCRPFRequestSuccess() closeMFARequestTest() Signature @isTest static void closeMFARequestTest() createTaxExemptionCaseTest() Signature @isTest static void createTaxExemptionCaseTest() getCustomerDetailsTest() Signature @isTest static void getCustomerDetailsTest() getPersonAccountRecordTypeIdTest() Signature @isTest static void getPersonAccountRecordTypeIdTest() initiateCRPRequestTestError() Signature @isTest static void initiateCRPRequestTestError() initiateCRPRequestTestSuccess() Signature @isTest static void initiateCRPRequestTestSuccess() initiateMFARequestTest() Signature @isTest static void initiateMFARequestTest()"
    },
    {
        "title": "TestDataFactory",
        "fileName": "TestDataFactory.html",
        "text": "TestDataFactory Signature public class TestDataFactory TestDataFactory Methods generateAccount(recordtypeid, doInsert) generateAsset(accountId, contactId, recordTypeId, doInsert) generateAssetLink(assetId, recordTypeId, doInsert) generateBank(accountId, recordTypeId, doInsert) generateBankAccount(doInsert) generateBankCase(recordTypeId, caseId, doInsert) generateBooking(bankaccountId, doInsert) generateCampaing(recordTypeId, doInsert) generateCase(recordTypeId, accountid, doInsert) generateDocumentRecord(docRecordTypeId, accountId, doInsert) generateEvaluation(assetId, doInsert) generateHistoryLog(recordId, recordTypeId, doInsert) generateKnowledgeRecord(recordTypeId, doInsert) generateLead(recordtypeid, doInsert) generateLog(recordId, recordTypeId, doInsert) generateOpportunity() generateScheduledOrder(recordTypeId, bankaccountId, doInsert) generateSubscription(accountId, contactId, subType, recordTypeId, doInsert) genrateKYC(accountId, recordTypeId, doInsert) getAccountBankCase(caseId, doInsert) getAssetEvaluation(assetId, doInsert) getAssetLink(assetId, doInsert) getAssetRealEstate(accountId, contactId, doInsert) getBankAccount(accountId, doInsert) getBankAccountBankCase(caseId, doInsert) getBankCase(accountId, doInsert) getBankSolarisBank(accountId, doInsert) getBooking(bankaccountId, doInsert) getBookingBankCase(caseId, doInsert) getBusinessAccount(doInsert) getCard(accountId, bankId, doInsert) getCardBankCase(caseId, doInsert) getCaseInvestment(accountId, doInsert) getChangeHistoryLog(recordId, doInsert) getChangeRequestLog(recordId, doInsert) getContact(doInsert) getContactCampaignMember(campaignId, contactId, doInsert) getContentVersion(doInsert) getDebugLog(recordId, doInsert) getDocumentForAccount(accountId, doInsert) getEVKontoCase(accountId, doInsert) getIntegerationLog(recordId, doInsert) getKnowledgeFAQRecord(doInsert) getKnowledgeSBRecord(doInsert) getKYCVideoIdentification(accountId, doInsert) getLeadCampaignMember(campaignId, leadId, doInsert) getNewsletterSubscription(accountId, contactId, doInsert) getOpportunityFullSale(accountId, doInsert) getPersonAccount(doInsert) getReservation(bankId, doInsert) getSeziure(accountId, doInsert) getStandardCampaign(doInsert) getStandardCase(accountId, doInsert) getStandardOpportunity(accountId, doInsert) getStandingOrder(bankaccountId, doInsert) getTimedOrder(bankaccountId, doInsert) getTimedOrderBankCase(caseId, doInsert) getUser(profileName) getViewHistoryLog(recordId, doInsert) getWebLead(doInsert) setRestRequest(endpoint, method) generateAccount(recordtypeid, doInsert) Signature private static Account generateAccount(String recordtypeid,Boolean doInsert) generateAsset(accountId, contactId, recordTypeId, doInsert) Signature private static Asset generateAsset(String accountId,String contactId,String recordTypeId,Boolean doInsert) generateAssetLink(assetId, recordTypeId, doInsert) Signature private static Asset_Link__c generateAssetLink(String assetId,String recordTypeId,Boolean doInsert) generateBank(accountId, recordTypeId, doInsert) Signature private static Bank__c generateBank(String accountId,String recordTypeId,Boolean doInsert) generateBankAccount(doInsert) Signature private static Bank_Account__c generateBankAccount(Final String accountId,Boolean doInsert) generateBankCase(recordTypeId, caseId, doInsert) Signature private static Bank_Case_Item__c generateBankCase(String recordTypeId,String caseId,Boolean doInsert) generateBooking(bankaccountId, doInsert) Signature private static Booking__c generateBooking(String bankaccountId,Boolean doInsert) generateCampaing(recordTypeId, doInsert) Signature private static Campaign generateCampaing(String recordTypeId,Boolean doInsert) generateCase(recordTypeId, accountid, doInsert) Signature private static Case generateCase(String recordTypeId,String accountid,Boolean doInsert) generateDocumentRecord(docRecordTypeId, accountId, doInsert) Signature private static Document__c generateDocumentRecord(String docRecordTypeId,String accountId,Boolean doInsert) generateEvaluation(assetId, doInsert) Signature private static Evaluation__c generateEvaluation(string assetId,Boolean doInsert) generateHistoryLog(recordId, recordTypeId, doInsert) Signature private static History_Tracker__c generateHistoryLog(String recordId,String recordTypeId,Boolean doInsert) generateKnowledgeRecord(recordTypeId, doInsert) Signature private static Knowledge__kav generateKnowledgeRecord(String recordTypeId,Boolean doInsert) generateLead(recordtypeid, doInsert) Signature private static Lead generateLead(String recordtypeid,Boolean doInsert) generateLog(recordId, recordTypeId, doInsert) Signature private static Log__c generateLog(String recordId,String recordTypeId,Boolean doInsert) generateOpportunity() Signature private static Opportunity generateOpportunity(Final String recordTypeId,Final String accountId,Final Boolean doInsert) generateScheduledOrder(recordTypeId, bankaccountId, doInsert) Signature private static Scheduled_Order__c generateScheduledOrder(String recordTypeId,String bankaccountId,Boolean doInsert) generateSubscription(accountId, contactId, subType, recordTypeId, doInsert) Signature private static Subscription__c generateSubscription(String accountId,String contactId,String subType,String recordTypeId,Boolean doInsert) genrateKYC(accountId, recordTypeId, doInsert) Signature private static KYC_Detail__c genrateKYC(String accountId,String recordTypeId,Boolean doInsert) getAccountBankCase(caseId, doInsert) Signature public static Bank_Case_Item__c getAccountBankCase(String caseId,Boolean doInsert) getAssetEvaluation(assetId, doInsert) Signature public static Evaluation__c getAssetEvaluation(String assetId,Boolean doInsert) getAssetLink(assetId, doInsert) Signature public static Asset_Link__c getAssetLink(String assetId,Boolean doInsert) getAssetRealEstate(accountId, contactId, doInsert) Signature public static Asset getAssetRealEstate(String accountId,String contactId,Boolean doInsert) getBankAccount(accountId, doInsert) Signature public static Bank_Account__c getBankAccount(String accountId,Boolean doInsert) getBankAccountBankCase(caseId, doInsert) Signature public static Bank_Case_Item__c getBankAccountBankCase(String caseId,Boolean doInsert) getBankCase(accountId, doInsert) Signature public static Case getBankCase(String accountId,Boolean doInsert) getBankSolarisBank(accountId, doInsert) Signature public static Bank__c getBankSolarisBank(String accountId,Boolean doInsert) getBooking(bankaccountId, doInsert) Signature public static Booking__c getBooking(String bankaccountId,Boolean doInsert) getBookingBankCase(caseId, doInsert) Signature public static Bank_Case_Item__c getBookingBankCase(String caseId,Boolean doInsert) getBusinessAccount(doInsert) Signature public static Account getBusinessAccount(Boolean doInsert) getCard(accountId, bankId, doInsert) Signature public static Card__c getCard(String accountId,String bankId,Boolean doInsert) getCardBankCase(caseId, doInsert) Signature public static Bank_Case_Item__c getCardBankCase(String caseId,Boolean doInsert) getCaseInvestment(accountId, doInsert) Signature public static Case getCaseInvestment(String accountId,Boolean doInsert) getChangeHistoryLog(recordId, doInsert) Signature public static History_Tracker__c getChangeHistoryLog(String recordId,Boolean doInsert) getChangeRequestLog(recordId, doInsert) Signature public static Change_Request_Log__c getChangeRequestLog(String recordId,Boolean doInsert) getContact(doInsert) Signature public static Contact getContact(Boolean doInsert) getContactCampaignMember(campaignId, contactId, doInsert) Signature public static CampaignMember getContactCampaignMember(String campaignId,String contactId,Boolean doInsert) getContentVersion(doInsert) Signature public static Contentversion getContentVersion(Boolean doInsert) getDebugLog(recordId, doInsert) Signature public static Log__c getDebugLog(String recordId,Boolean doInsert) getDocumentForAccount(accountId, doInsert) Signature public static Document__c getDocumentForAccount(String accountId,Boolean doInsert) getEVKontoCase(accountId, doInsert) Signature public static Case getEVKontoCase(String accountId,Boolean doInsert) getIntegerationLog(recordId, doInsert) Signature public static Log__c getIntegerationLog(String recordId,Boolean doInsert) getKnowledgeFAQRecord(doInsert) Signature public static Knowledge__kav getKnowledgeFAQRecord(Boolean doInsert) getKnowledgeSBRecord(doInsert) Signature public static Knowledge__kav getKnowledgeSBRecord(Boolean doInsert) getKYCVideoIdentification(accountId, doInsert) Signature public static KYC_Detail__c getKYCVideoIdentification(String accountId,Boolean doInsert) getLeadCampaignMember(campaignId, leadId, doInsert) Signature public static CampaignMember getLeadCampaignMember(String campaignId,String leadId,Boolean doInsert) getNewsletterSubscription(accountId, contactId, doInsert) Signature public static Subscription__c getNewsletterSubscription(String accountId,String contactId,Boolean doInsert) getOpportunityFullSale(accountId, doInsert) Signature public static Opportunity getOpportunityFullSale(String accountId,Boolean doInsert) getPersonAccount(doInsert) Signature public static Account getPersonAccount(Boolean doInsert) getReservation(bankId, doInsert) Signature public static Reservation__c getReservation(String bankId,Boolean doInsert) getSeziure(accountId, doInsert) Signature public static Seizure__c getSeziure(String accountId,Boolean doInsert) getStandardCampaign(doInsert) Signature public static Campaign getStandardCampaign(Boolean doInsert) getStandardCase(accountId, doInsert) Signature public static Case getStandardCase(String accountId,Boolean doInsert) getStandardOpportunity(accountId, doInsert) Signature public static Opportunity getStandardOpportunity(String accountId,Boolean doInsert) getStandingOrder(bankaccountId, doInsert) Signature public static Scheduled_Order__c getStandingOrder(String bankaccountId,Boolean doInsert) getTimedOrder(bankaccountId, doInsert) Signature public static Scheduled_Order__c getTimedOrder(String bankaccountId,Boolean doInsert) getTimedOrderBankCase(caseId, doInsert) Signature public static Bank_Case_Item__c getTimedOrderBankCase(String caseId,Boolean doInsert) getUser(profileName) Signature public static user getUser(String profileName) getViewHistoryLog(recordId, doInsert) Signature public static History_Tracker__c getViewHistoryLog(String recordId,Boolean doInsert) getWebLead(doInsert) Signature public static Lead getWebLead(Boolean doInsert) setRestRequest(endpoint, method) Signature public static RestRequest setRestRequest(String endpoint,String method)"
    },
    {
        "title": "TrackerDashboardController",
        "fileName": "TrackerDashboardController.html",
        "text": "TrackerDashboardController Signature public with sharing class TrackerDashboardController TrackerDashboardController Methods fetchAllTrackingRecords(startDate, endDate) getLoginHistory(startDate, endDate) getPastYearWeeks() getSystemAdminId() fetchAllTrackingRecords(startDate, endDate) Signature @AuraEnabled public static List<History_Tracker__c> fetchAllTrackingRecords(String startDate,String endDate) getLoginHistory(startDate, endDate) Signature @AuraEnabled public static Map<String,List<Object>> getLoginHistory(String startDate,String endDate) getPastYearWeeks() Signature @AuraEnabled(cacheable=true) public static List<DateTime> getPastYearWeeks() getSystemAdminId() Signature private static String getSystemAdminId()"
    },
    {
        "title": "TrackerDashboardControllerTest",
        "fileName": "TrackerDashboardControllerTest.html",
        "text": "TrackerDashboardControllerTest Signature @isTest private class TrackerDashboardControllerTest TrackerDashboardControllerTest Methods getValues() getValues() Signature @isTest static void getValues()"
    },
    {
        "title": "TrackHistory",
        "fileName": "TrackHistory.html",
        "text": "TrackHistory Signature public without sharing  class TrackHistory TrackHistory Methods captureChanges(changes) checkTrackStatus(objectName, operation) getFieldApiForName(objectName) getFieldsToTrack(ObjectName) logUsageEntry(recordId, objectName) publishChanges(objectName, newRecords) publishChanges(objectName, newRecords, oldRecords) publishChanges(objectApiName) captureChanges(changes) Signature public static void captureChanges(List<Tracking_Events__e> changes) checkTrackStatus(objectName, operation) Signature private static Boolean checkTrackStatus(String objectName,String operation) getFieldApiForName(objectName) Signature private static String getFieldApiForName(String objectName) getFieldsToTrack(ObjectName) Signature private static List<String> getFieldsToTrack(String ObjectName) logUsageEntry(recordId, objectName) Signature @AuraEnabled public static void logUsageEntry(String recordId ,String objectName) publishChanges(objectName, newRecords) Signature public static void publishChanges(String objectName,List<sObject> newRecords) publishChanges(objectName, newRecords, oldRecords) Signature public static void publishChanges(String objectName,List<sObject> newRecords,Map<id,sObject> oldRecords) publishChanges(objectApiName) Signature public static void publishChanges(String objectApiName)"
    },
    {
        "title": "TrackHistoryTest",
        "fileName": "TrackHistoryTest.html",
        "text": "TrackHistoryTest Signature @isTest public class TrackHistoryTest TrackHistoryTest Methods captureChangesTest() logEntryTest() objectTrackingPart1Test() publishChangesTest() setupData() testlogUsageEntry() captureChangesTest() Signature @isTest static void captureChangesTest() logEntryTest() Signature @isTest static void logEntryTest() objectTrackingPart1Test() Signature @isTest static void objectTrackingPart1Test() publishChangesTest() Signature @isTest static void publishChangesTest() setupData() Signature @testSetup static void setupData() testlogUsageEntry() Signature @isTest static void testlogUsageEntry()"
    },
    {
        "title": "TrackingEventsHandler",
        "fileName": "TrackingEventsHandler.html",
        "text": "TrackingEventsHandler Signature public class TrackingEventsHandler  extends TriggerHandler TrackingEventsHandler Methods afterInsert() afterInsert() Signature protected override void afterInsert(final List<SObject> newObjects)"
    },
    {
        "title": "Translate",
        "fileName": "Translate.html",
        "text": "Translate Signature global inherited sharing  class Translate Translate Properties Name Signature translatedValues global List<TranslationWrapper> translatedValues Translate Constructors Translate() Translate() Signature global Translate() Translate Methods getTranlsatedPicklistValues(objectName, fieldName) getTranslatedPickListValues(objectName, fieldName) getTranlsatedPicklistValues(objectName, fieldName) Signature private void getTranlsatedPicklistValues(String objectName,String fieldName) getTranslatedPickListValues(objectName, fieldName) Signature global static String getTranslatedPickListValues( String objectName,String fieldName) Translate.TranslationWrapper Signature global class TranslationWrapper Translate.TranslationWrapper Properties Name Signature label global String label language global String language value global String value Translate.TranslationWrapper Constructors TranslationWrapper(language, value, label) TranslationWrapper(language, value, label) Signature global TranslationWrapper(String language,String value,String label )"
    },
    {
        "title": "TranslateTest",
        "fileName": "TranslateTest.html",
        "text": "TranslateTest Signature @isTest public class TranslateTest TranslateTest Constructors translateTest() translateTest() Signature @isTest static void translateTest() TranslateTest Methods getTranslatedPickListValuesTest() getTranslatedPickListValuesTest() Signature @isTest static void getTranslatedPickListValuesTest()"
    },
    {
        "title": "TriggerHandler",
        "fileName": "TriggerHandler.html",
        "text": "TriggerHandler Signature public virtual class TriggerHandler TriggerHandler Properties Name Signature operation public System.TriggerOperation operation triggerNew public List<SObject> triggerNew triggerNewMap public Map<Id, SObject> triggerNewMap triggerOldMap public Map<Id, SObject> triggerOldMap TriggerHandler Constructors TriggerHandler() TriggerHandler() Signature public TriggerHandler() TriggerHandler Methods afterInsert() afterUpdate(Map beforeDelete(Map beforeInsert() beforeUpdate(Map execute() init(Map afterInsert() Signature protected virtual void afterInsert(final List<SObject> newObjects) afterUpdate(Map Signature protected virtual void afterUpdate(final Map<Id, SObject> newObjects, final Map<Id, SObject> oldObjects) beforeDelete(Map Signature protected virtual void beforeDelete(final Map<Id, SObject> oldObjects) beforeInsert() Signature protected virtual void beforeInsert(final List<SObject> newObjects) beforeUpdate(Map Signature protected virtual void beforeUpdate(final Map<Id, SObject> newObjects, final Map<Id, SObject> oldObjects) execute() Signature public virtual void execute() init(Map Signature public virtual void init(final System.TriggerOperation operation, final List<SObject> triggerNew, final Map<Id, SObject> triggerNewMap,             final Map<Id, SObject> triggerOldMap)"
    },
    {
        "title": "TriggerHandlerFactory",
        "fileName": "TriggerHandlerFactory.html",
        "text": "TriggerHandlerFactory Signature public class TriggerHandlerFactory TriggerHandlerFactory Methods executeHandler(Map executeHandler(Map Signature public static void executeHandler(final Type handlerClass, final System.TriggerOperation operation, final List<SObject> triggerNew,                    final Map<Id, SObject> triggerNewMap, final Map<Id, SObject> triggerOldMap) TriggerHandlerFactory.TriggerHandlerFactoryException Signature public class TriggerHandlerFactoryException extends Exception"
    },
    {
        "title": "UploadFileController",
        "fileName": "UploadFileController.html",
        "text": "UploadFileController Signature public class UploadFileController UploadFileController Methods getConfigurations(objectName, recordId) getOptions(objectName, recordId) retriveTagedVersions(objectName, recordId, tag) tagVersionFiles(objectName, recordId, tag, documnetIds) getConfigurations(objectName, recordId) Signature private static File_Type_Option__mdt getConfigurations(String objectName,String recordId) getOptions(objectName, recordId) Signature @AuraEnabled public static List<String> getOptions(String objectName,String recordId) retriveTagedVersions(objectName, recordId, tag) Signature @AuraEnabled public static List<ContentVersion> retriveTagedVersions(String objectName,String recordId,String tag) tagVersionFiles(objectName, recordId, tag, documnetIds) Signature @AuraEnabled public static void tagVersionFiles(String objectName,String recordId,String tag,List<String> documnetIds)"
    },
    {
        "title": "UploadFileControllerTest",
        "fileName": "UploadFileControllerTest.html",
        "text": "UploadFileControllerTest Signature @isTest public class UploadFileControllerTest UploadFileControllerTest Methods testgetOptions() testSetup() testgetOptions() Signature @isTest static void testgetOptions() testSetup() Signature @testSetup static void testSetup()"
    }
];
